/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IMagicPixels,
  IMagicPixelsInterface,
} from "../../../../../contracts/diamond/facets/MagicPixels/IMagicPixels";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "batches",
        type: "uint256",
      },
    ],
    name: "conjure",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "indices",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "delays",
        type: "uint256[]",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "pixelsOf",
    outputs: [
      {
        internalType: "uint8[][]",
        name: "",
        type: "uint8[][]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint8[][]",
        name: "plate",
        type: "uint8[][]",
      },
    ],
    name: "restore",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "a",
        type: "address",
      },
    ],
    name: "setMagicPlates",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IMagicPixels__factory {
  static readonly abi = _abi;
  static createInterface(): IMagicPixelsInterface {
    return new Interface(_abi) as IMagicPixelsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IMagicPixels {
    return new Contract(address, _abi, runner) as unknown as IMagicPixels;
  }
}
