/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../common";
import type {
  AuctionHouse,
  AuctionHouseInterface,
} from "../../../../../../contracts/diamond/facets/AuctionHouse/AHCore.sol/AuctionHouse";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8[][]",
        name: "pixels",
        type: "uint8[][]",
      },
    ],
    name: "TradeClosed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "TradeOpened",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "cancelTrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "closeTrade",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "getTrade",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address",
            name: "buyer",
            type: "address",
          },
          {
            internalType: "uint8[][]",
            name: "pixels",
            type: "uint8[][]",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        internalType: "struct LibAuctionHouse.Trade",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        internalType: "uint8[][]",
        name: "pixels",
        type: "uint8[][]",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "openTrade",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611521806100206000396000f3fe60806040526004361061003f5760003560e01c80635177fd3b146100445780637439d3c6146100595780637cfb41b81461006c578063a3b137991461008c575b600080fd5b610057610052366004610f9f565b6100c2565b005b610057610067366004610fb8565b610401565b34801561007857600080fd5b50610057610087366004610f9f565b61068b565b34801561009857600080fd5b506100ac6100a7366004610f9f565b61081f565b6040516100b99190611052565b60405180910390f35b60008181526000805160206114cc83398151915260209081526040808320815160808101835281546001600160a01b03908116825260018301541681850152600282018054845181870281018701865281815292959394860193879084015b828210156101ab5760008481526020908190208301805460408051828502810185019091528181529283018282801561019757602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116101685790505b505050505081526020019060010190610121565b50505050815260200160038201548152505090503460000361028d5780516001600160a01b0316156102095780516001600160a01b031632146102095760405162461bcd60e51b815260040161020090611115565b60405180910390fd5b61021c8160400151328360000151610963565b606081015160405160009132918381818185875af1925050503d8060008114610261576040519150601f19603f3d011682016040523d82523d6000602084013e610266565b606091505b50509050806102875760405162461bcd60e51b81526004016102009061113d565b506103a1565b806060015134146102d75760405162461bcd60e51b81526020600482015260146024820152731a5b98dbdc9c9958dd08195d1a08185b5bdd5b9d60621b6044820152606401610200565b60208101516001600160a01b0316156103165760208101516001600160a01b031632146103165760405162461bcd60e51b815260040161020090611115565b805160608201516040516000926001600160a01b031691908381818185875af1925050503d8060008114610366576040519150601f19603f3d011682016040523d82523d6000602084013e61036b565b606091505b505090508061038c5760405162461bcd60e51b81526004016102009061113d565b61039f8260400151836000015132610963565b505b6103aa82610c5c565b326001600160a01b031681600001516001600160a01b03167fe0262fa4b4b8df117ff636cd0a87d211a77071d7cf535f44f90ab7022f881de183604001516040516103f59190611165565b60405180910390a35050565b6040516000805160206114cc8339815191529060009061042b903290889088908890602001611249565b60408051601f1981840301815291815281516020928301206000818152928590529120549091506001600160a01b03161561049f5760405162461bcd60e51b8152602060048201526014602482015273747261646520616c72656164792065786973747360601b6044820152606401610200565b3460000361054657604080516080810182523281526001600160a01b03881660208201529081016104d08688611372565b815260209081018590526000838152848252604090819020835181546001600160a01b039182166001600160a01b031991821617835585850151600184018054919093169116179055908301518051919261053392600285019290910190610dcf565b5060608201518160030155905050610627565b82341461058c5760405162461bcd60e51b81526020600482015260146024820152731a5b98dbdc9c9958dd08195d1a08185b5bdd5b9d60621b6044820152606401610200565b604080516080810182526001600160a01b03881681523260208201529081016105b58688611372565b815260209081018590526000838152848252604090819020835181546001600160a01b039182166001600160a01b031991821617835585850151600184018054919093169116179055908301518051919261061892600285019290910190610dcf565b50606082015181600301559050505b326000818152600180850160209081526040808420805493840181558452922001839055517f0ab38872695ed13586378e0824a603ce547d1b24ab0f85d858b2e0fc19a362b79061067b9084815260200190565b60405180910390a2505050505050565b60008181526000805160206114cc83398151915260209081526040808320815160808101835281546001600160a01b03908116825260018301541681850152600282018054845181870281018701865281815292959394860193879084015b828210156107745760008481526020908190208301805460408051828502810185019091528181529283018282801561076057602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116107315790505b5050505050815260200190600101906106ea565b505050508152602001600382015481525050905061079182610c5c565b326001600160a01b031681602001516001600160a01b03160361081b57606081015160405160009132918381818185875af1925050503d80600081146107f3576040519150601f19603f3d011682016040523d82523d6000602084013e6107f8565b606091505b50509050806108195760405162461bcd60e51b81526004016102009061113d565b505b5050565b61085c604051806080016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001600081525090565b6000805160206114cc833981519152600083815260209182526040808220815160808101835281546001600160a01b039081168252600183015416818601526002820180548451818802810188018652818152929693959487019492939192909184015b8282101561094a5760008481526020908190208301805460408051828502810185019091528181529283018282801561093657602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116109075790505b5050505050815260200190600101906108c0565b5050505081526020016003820154815250509050919050565b6001600160a01b0382811660009081527fa32ac351050f01911d543184484dd0b56f1a44a545355195dea6fa48038b73746020526040808220928416825281207fa32ac351050f01911d543184484dd0b56f1a44a545355195dea6fa48038b736f92915b8651811015610c535760008782815181106109e4576109e4611444565b6020908102919091010151845490915060005b8554811015610b1f576000868581548110610a1457610a14611444565b90600052602060002001805480602002602001604051908101604052809291908181526020018280548015610a8657602002820191906000526020600020906000905b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610a575790505b5050505050905060006001905060005b8551811015610af957828181518110610ab157610ab1611444565b602002602001015160ff16868281518110610ace57610ace611444565b602002602001015160ff1614610ae75760009150610af9565b80610af181611470565b915050610a96565b508015610b0a578293505050610b1f565b50508080610b1790611470565b9150506109f7565b5084548103610b705760405162461bcd60e51b815260206004820152601f60248201527f73656c6c657220646f6573206e6f74206f776e20616c6c20706978656c732e006044820152606401610200565b83858281548110610b8357610b83611444565b600091825260208083208454600181018655948452922091018054610bac939290920191610e2c565b50600060018a51610bbd9190611489565b905080821015610c0f57858181548110610bd957610bd9611444565b90600052602060002001868381548110610bf557610bf5611444565b90600052602060002001908054610c0d929190610e2c565b505b85805480610c1f57610c1f6114a2565b600190038181906000526020600020016000610c3b9190610e86565b90555050508080610c4b90611470565b9150506109c7565b50505050505050565b3260009081527f50e6db0ee6a1e6e0676f1837cc048e5c36c133a90fbafbfaa36526366e90b03f602052604081206000805160206114cc83398151915291805b8254811015610d0c5784838281548110610cb857610cb8611444565b906000526020600020015403610cd057809150610d0c565b8254610cdd8260016114b8565b03610cfa5760405162461bcd60e51b815260040161020090611115565b80610d0481611470565b915050610c9c565b50815460011015610d615781548290610d2790600190611489565b81548110610d3757610d37611444565b9060005260206000200154828281548110610d5457610d54611444565b6000918252602090912001555b81805480610d7157610d716114a2565b6000828152602080822083016000199081018390559092019092558582528490526040812080546001600160a01b03199081168255600182018054909116905590610dbf6002830182610eae565b6003820160009055505050505050565b828054828255906000526020600020908101928215610e1c579160200282015b82811115610e1c5782518051610e0c918491602090910190610ecc565b5091602001919060010190610def565b50610e28929150610f6d565b5090565b82805482825590600052602060002090601f01602090048101928215610e7a57600052602060002091601f016020900482015b82811115610e7a578254825591600101919060010190610e5f565b50610e28929150610f8a565b50805460008255601f016020900490600052602060002090810190610eab9190610f8a565b50565b5080546000825590600052602060002090810190610eab9190610f6d565b82805482825590600052602060002090601f01602090048101928215610e7a5791602002820160005b83821115610f3357835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610ef5565b8015610f605782816101000a81549060ff0219169055600101602081600001049283019260010302610f33565b5050610e28929150610f8a565b80821115610e28576000610f818282610e86565b50600101610f6d565b5b80821115610e285760008155600101610f8b565b600060208284031215610fb157600080fd5b5035919050565b60008060008060608587031215610fce57600080fd5b84356001600160a01b0381168114610fe557600080fd5b9350602085013567ffffffffffffffff8082111561100257600080fd5b818701915087601f83011261101657600080fd5b81358181111561102557600080fd5b8860208260051b850101111561103a57600080fd5b95986020929092019750949560400135945092505050565b602080825282516001600160a01b0390811683830152838201511660408084019190915283015160806060840152805160a084018190526000929160c0600583901b8601810192918401919086019085805b828110156110fb5788860360bf19018452845180518088529088019088880190845b818110156110e557835160ff168352928a0192918a01916001016110c6565b50909750505093860193928601926001016110a4565b505050505060608501516080850152809250505092915050565b6020808252600e908201526d1b9bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b6020808252600e908201526d1c185e5b595b9d0819985a5b195960921b604082015260600190565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b838110156111e457888603603f19018552825180518088529088019088880190845b818110156111ce57835160ff168352928a0192918a01916001016111af565b509097505050938601939186019160010161118d565b509398975050505050505050565b803560ff8116811461120357600080fd5b919050565b8183526000602080850194508260005b8581101561123e5760ff61122b836111f2565b1687529582019590820190600101611218565b509495945050505050565b6001600160a01b038581168252841660208083019190915260606040830181905282018390526000906005906080808501919086841b86010187855b888110156112f757878303607f190185528135368b9003601e190181126112ab57600080fd5b8a01848101903567ffffffffffffffff8111156112c757600080fd5b80881b36038213156112d857600080fd5b6112e3858284611208565b968601969450505090830190600101611285565b50909a9950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561134657611346611307565b604052919050565b600067ffffffffffffffff82111561136857611368611307565b5060051b60200190565b60006113856113808461134e565b61131d565b83815260208082019190600586811b8601368111156113a357600080fd5b865b8181101561143757803567ffffffffffffffff8111156113c55760008081fd5b880136601f8201126113d75760008081fd5b80356113e56113808261134e565b81815290851b820186019086810190368311156114025760008081fd5b928701925b8284101561142757611418846111f2565b82529287019290870190611407565b89525050509483019483016113a5565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016114825761148261145a565b5060010190565b8181038181111561149c5761149c61145a565b92915050565b634e487b7160e01b600052603160045260246000fd5b8082018082111561149c5761149c61145a56fe50e6db0ee6a1e6e0676f1837cc048e5c36c133a90fbafbfaa36526366e90b03ea2646970667358221220aaf7ead89a21d478aa9ab1fa6e5157c20e4fcc102eebc7cd0cd19081302e8a6364736f6c63430008120033";

type AuctionHouseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuctionHouseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AuctionHouse__factory extends ContractFactory {
  constructor(...args: AuctionHouseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AuctionHouse & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AuctionHouse__factory {
    return super.connect(runner) as AuctionHouse__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuctionHouseInterface {
    return new Interface(_abi) as AuctionHouseInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AuctionHouse {
    return new Contract(address, _abi, runner) as unknown as AuctionHouse;
  }
}
