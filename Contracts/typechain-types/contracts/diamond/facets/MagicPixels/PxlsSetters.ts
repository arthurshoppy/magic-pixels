/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface PxlsSettersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "setBatchSize"
      | "setDepthProbabilities"
      | "setMagicPlates"
      | "setMaxPixel"
      | "setPlateSize"
      | "setPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setBatchSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepthProbabilities",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMagicPlates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPixel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlateSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "setBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepthProbabilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMagicPlates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPixel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlateSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
}

export interface PxlsSetters extends BaseContract {
  connect(runner?: ContractRunner | null): PxlsSetters;
  waitForDeployment(): Promise<this>;

  interface: PxlsSettersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  setBatchSize: TypedContractMethod<[s: BigNumberish], [void], "nonpayable">;

  setDepthProbabilities: TypedContractMethod<
    [dp: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setMagicPlates: TypedContractMethod<[a: AddressLike], [void], "nonpayable">;

  setMaxPixel: TypedContractMethod<[m: BigNumberish], [void], "nonpayable">;

  setPlateSize: TypedContractMethod<[s: BigNumberish], [void], "nonpayable">;

  setPrice: TypedContractMethod<[p: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "setBatchSize"
  ): TypedContractMethod<[s: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDepthProbabilities"
  ): TypedContractMethod<[dp: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMagicPlates"
  ): TypedContractMethod<[a: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxPixel"
  ): TypedContractMethod<[m: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlateSize"
  ): TypedContractMethod<[s: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPrice"
  ): TypedContractMethod<[p: BigNumberish], [void], "nonpayable">;

  filters: {};
}
