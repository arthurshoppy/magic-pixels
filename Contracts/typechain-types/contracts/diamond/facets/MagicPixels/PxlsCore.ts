/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface PxlsCoreInterface extends Interface {
  getFunction(
    nameOrSignature: "conjure" | "mint" | "restore"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Conjured" | "EthFound"): EventFragment;

  encodeFunctionData(
    functionFragment: "conjure",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "restore",
    values: [AddressLike, BigNumberish[][]]
  ): string;

  decodeFunctionResult(functionFragment: "conjure", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "restore", data: BytesLike): Result;
}

export namespace ConjuredEvent {
  export type InputTuple = [to: AddressLike, pixels: BigNumberish[][]];
  export type OutputTuple = [to: string, pixels: bigint[][]];
  export interface OutputObject {
    to: string;
    pixels: bigint[][];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EthFoundEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PxlsCore extends BaseContract {
  connect(runner?: ContractRunner | null): PxlsCore;
  waitForDeployment(): Promise<this>;

  interface: PxlsCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  conjure: TypedContractMethod<[batches: BigNumberish], [void], "payable">;

  mint: TypedContractMethod<
    [indices: BigNumberish[], delays: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  restore: TypedContractMethod<
    [to: AddressLike, plate: BigNumberish[][]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "conjure"
  ): TypedContractMethod<[batches: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [indices: BigNumberish[], delays: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "restore"
  ): TypedContractMethod<
    [to: AddressLike, plate: BigNumberish[][]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Conjured"
  ): TypedContractEvent<
    ConjuredEvent.InputTuple,
    ConjuredEvent.OutputTuple,
    ConjuredEvent.OutputObject
  >;
  getEvent(
    key: "EthFound"
  ): TypedContractEvent<
    EthFoundEvent.InputTuple,
    EthFoundEvent.OutputTuple,
    EthFoundEvent.OutputObject
  >;

  filters: {
    "Conjured(address,uint8[][])": TypedContractEvent<
      ConjuredEvent.InputTuple,
      ConjuredEvent.OutputTuple,
      ConjuredEvent.OutputObject
    >;
    Conjured: TypedContractEvent<
      ConjuredEvent.InputTuple,
      ConjuredEvent.OutputTuple,
      ConjuredEvent.OutputObject
    >;

    "EthFound(address,uint256)": TypedContractEvent<
      EthFoundEvent.InputTuple,
      EthFoundEvent.OutputTuple,
      EthFoundEvent.OutputObject
    >;
    EthFound: TypedContractEvent<
      EthFoundEvent.InputTuple,
      EthFoundEvent.OutputTuple,
      EthFoundEvent.OutputObject
    >;
  };
}
