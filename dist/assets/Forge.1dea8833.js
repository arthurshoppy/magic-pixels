import{d as x,q as O,c as s,i,I as $,a as A,s as D,x as J,t as h}from"./vendor.e5a6da0d.js";import{B as I}from"./index.ab3a87ba.js";import{E as l,C as S,a as B}from"./Container.ae041068.js";import{P as v}from"./Pixel.dd10947a.js";import{D as d}from"./plate.d43d7ba5.js";const F=h('<div class="grid"></div>'),k=h('<div class="grid grid-flow-col sm:grid-flow-row space-x-1.5 sm:space-x-0 sm:space-y-1.5"></div>'),q=h('<div class="grow grid grid-rows-[1fr,min-content] sm:grid-rows-none sm:grid-cols-[1fr,min-content] gap-2"><div class="flex flex-col-reverse sm:flex-col"><div class="aspect-square grid"></div><div class="mb-2 sm:mt-2 sm:mb-auto"></div></div><div class="flex flex-row sm:flex-col overflow-hidden"><div class="flex flex-col mr-2 sm:mr-0 sm:mb-2"><div class="leading-none mb-1">Pixels</div></div></div></div>'),Y=()=>{const[m,_]=x(JSON.parse(localStorage.getItem("pixels")||"[]")),[a,w]=x(Array(d**2).fill(1).map(()=>[l])),[g,y]=x();let u;const p=e=>{u.style.setProperty("left",`${e.x-22}px`),u.style.setProperty("top",`${e.y-22}px`)},C=(e,t)=>{document.body.style.setProperty("cursor","grabbing"),document.addEventListener("mousemove",p),p(t),y(e)},E=e=>{document.body.style.setProperty("cursor","unset"),document.removeEventListener("mousemove",p);const t=[...a()],o=g();if(t[e][0]===l&&!o)return;const n=[...m()];o?(n.splice(o.idx,1),t[e][0]!==l&&n.unshift(t[e])):n.unshift(t[e]),_(n),t[e]=[...o?.pixel||[l]],y(void 0),w(t)},b=O(()=>!a().some(e=>e[0]===l),[a]),M=()=>{const e=JSON.parse(localStorage.getItem("plates")||"[]");localStorage.setItem("plates",JSON.stringify([...e].concat([[...a()]]))),localStorage.setItem("pixels",JSON.stringify(m())),w(Array(d**2).fill(1).map(()=>[l]))};return[s(B,{className:"m-auto max-w-[100vw] sm:h-[70vh] sm:w-[75vh] lg:h-[80vh] lg:w-[85vh] text-white select-none",get children(){const e=q.cloneNode(!0),t=e.firstChild,o=t.firstChild,n=o.nextSibling,P=t.nextSibling,N=P.firstChild;return N.firstChild,i(o,s(S,{classNameInner:"px-0 py-0 grid grow",get children(){const r=F.cloneNode(!0);return r.style.setProperty("grid-template-rows",`repeat(${d}, 1fr)`),r.style.setProperty("grid-template-columns",`repeat(${d}, 1fr)`),i(r,s($,{get each(){return a()},children:(c,f)=>s(v,{get className(){return`${c()[0]===l?"bg-black/20":"cursor-pointer"}`},get colors(){return c()},onMouseUp:[E,f]})})),r}})),i(n,s(I,{className:"text-sm px-3",onClick:M,get disabled(){return!b()},children:"Mint"})),i(N,s(I,{className:"text-sm grow",children:"Filter"}),null),i(P,s(S,{className:"grid overflow-hidden h-4.5 sm:h-auto sm:w-[4.5rem] grow",classNameInner:"overflow-auto",get children(){const r=k.cloneNode(!0);return i(r,s($,{get each(){return m()},children:(c,f)=>s(v,{className:"h-12 w-12 cursor-grab",get colors(){return c()},get onMouseDown(){return[C,{idx:f,pixel:c()}]}})}),null),i(r,()=>!m().length&&"Empty",null),r}}),null),A(()=>D(n,"title",b()?void 0:"Fill up the whole canvas to mint.")),e}}),s(J,{get mount(){return document.getElementById("root")},get children(){return s(v,{ref:e=>u=e,get className(){return`h-12 w-12 z-10 absolute pointer-events-none  ${g()?"":"hidden"}`},get colors(){return g()?.pixel||[l]}})}})]};export{Y as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
