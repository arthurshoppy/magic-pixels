/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IMagicPixelsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "conjure"
      | "mint"
      | "pixelsOf"
      | "restore"
      | "setMagicPlates"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "conjure",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pixelsOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "restore",
    values: [AddressLike, BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMagicPlates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "conjure", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pixelsOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "restore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMagicPlates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface IMagicPixels extends BaseContract {
  connect(runner?: ContractRunner | null): IMagicPixels;
  waitForDeployment(): Promise<this>;

  interface: IMagicPixelsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  conjure: TypedContractMethod<[batches: BigNumberish], [void], "payable">;

  mint: TypedContractMethod<
    [indices: BigNumberish[], delays: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  pixelsOf: TypedContractMethod<[addr: AddressLike], [bigint[][]], "view">;

  restore: TypedContractMethod<
    [to: AddressLike, plate: BigNumberish[][]],
    [void],
    "nonpayable"
  >;

  setMagicPlates: TypedContractMethod<[a: AddressLike], [void], "nonpayable">;

  withdraw: TypedContractMethod<
    [amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "conjure"
  ): TypedContractMethod<[batches: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [indices: BigNumberish[], delays: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pixelsOf"
  ): TypedContractMethod<[addr: AddressLike], [bigint[][]], "view">;
  getFunction(
    nameOrSignature: "restore"
  ): TypedContractMethod<
    [to: AddressLike, plate: BigNumberish[][]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMagicPlates"
  ): TypedContractMethod<[a: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;

  filters: {};
}
