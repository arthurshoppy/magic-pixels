/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface Test1FacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "supportsInterface"
      | "test1Func1"
      | "test1Func10"
      | "test1Func11"
      | "test1Func12"
      | "test1Func13"
      | "test1Func14"
      | "test1Func15"
      | "test1Func16"
      | "test1Func17"
      | "test1Func18"
      | "test1Func19"
      | "test1Func2"
      | "test1Func20"
      | "test1Func3"
      | "test1Func4"
      | "test1Func5"
      | "test1Func6"
      | "test1Func7"
      | "test1Func8"
      | "test1Func9"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TestEvent"): EventFragment;

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func10",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func11",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func12",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func13",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func14",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func15",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func16",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func17",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func18",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func19",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func5",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func6",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func7",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func8",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test1Func9",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test1Func1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "test1Func10",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test1Func11",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test1Func12",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test1Func13",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test1Func14",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test1Func15",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test1Func16",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test1Func17",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test1Func18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test1Func19",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test1Func2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "test1Func20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test1Func3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test1Func4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test1Func5", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test1Func6", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test1Func7", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test1Func8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test1Func9", data: BytesLike): Result;
}

export namespace TestEventEvent {
  export type InputTuple = [something: AddressLike];
  export type OutputTuple = [something: string];
  export interface OutputObject {
    something: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Test1Facet extends BaseContract {
  connect(runner?: ContractRunner | null): Test1Facet;
  waitForDeployment(): Promise<this>;

  interface: Test1FacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  supportsInterface: TypedContractMethod<
    [_interfaceID: BytesLike],
    [boolean],
    "view"
  >;

  test1Func1: TypedContractMethod<[], [void], "nonpayable">;

  test1Func10: TypedContractMethod<[], [void], "nonpayable">;

  test1Func11: TypedContractMethod<[], [void], "nonpayable">;

  test1Func12: TypedContractMethod<[], [void], "nonpayable">;

  test1Func13: TypedContractMethod<[], [void], "nonpayable">;

  test1Func14: TypedContractMethod<[], [void], "nonpayable">;

  test1Func15: TypedContractMethod<[], [void], "nonpayable">;

  test1Func16: TypedContractMethod<[], [void], "nonpayable">;

  test1Func17: TypedContractMethod<[], [void], "nonpayable">;

  test1Func18: TypedContractMethod<[], [void], "nonpayable">;

  test1Func19: TypedContractMethod<[], [void], "nonpayable">;

  test1Func2: TypedContractMethod<[], [void], "nonpayable">;

  test1Func20: TypedContractMethod<[], [void], "nonpayable">;

  test1Func3: TypedContractMethod<[], [void], "nonpayable">;

  test1Func4: TypedContractMethod<[], [void], "nonpayable">;

  test1Func5: TypedContractMethod<[], [void], "nonpayable">;

  test1Func6: TypedContractMethod<[], [void], "nonpayable">;

  test1Func7: TypedContractMethod<[], [void], "nonpayable">;

  test1Func8: TypedContractMethod<[], [void], "nonpayable">;

  test1Func9: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceID: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "test1Func1"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func10"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func11"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func12"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func13"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func14"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func15"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func16"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func17"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func18"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func19"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func2"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func20"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func3"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func4"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func5"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func6"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func7"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func8"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test1Func9"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "TestEvent"
  ): TypedContractEvent<
    TestEventEvent.InputTuple,
    TestEventEvent.OutputTuple,
    TestEventEvent.OutputObject
  >;

  filters: {
    "TestEvent(address)": TypedContractEvent<
      TestEventEvent.InputTuple,
      TestEventEvent.OutputTuple,
      TestEventEvent.OutputObject
    >;
    TestEvent: TypedContractEvent<
      TestEventEvent.InputTuple,
      TestEventEvent.OutputTuple,
      TestEventEvent.OutputObject
    >;
  };
}
