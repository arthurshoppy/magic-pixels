{
	"id": "076473fc686efb30f4509695a2a29372",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.9",
	"solcLongVersion": "0.8.9+commit.e5eed63a",
	"input": {
		"language": "Solidity",
		"sources": {
			"src/Contracts/Nether.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\ncontract Nether is Initializable, PausableUpgradeable, OwnableUpgradeable {\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize() initializer public {\r\n        __Pausable_init();\r\n        __Ownable_init();\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n}"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a\",\"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 752,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
				"PausableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9c7d1f5e15633ab912b74c2f57e24559e66b03232300d4b27ff0f25bc452ecad\",\"dweb:/ipfs/QmYTJkc1cntYkKQ1Tu11nBcJLakiy93Tjytc4XHELo4GmR\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 752,
								"contract": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 321,
								"contract": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "_paused",
								"offset": 0,
								"slot": "51",
								"type": "t_bool"
							},
							{
								"astId": 426,
								"contract": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:8281  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:8281  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b62a6adfb90b267d07b6e0165849d3a1dc4900598434a6b8aa70a0491f68d49864736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b62a6adfb90b267d07b6e0165849d3a1dc4900598434a6b8aa70a0491f68d49864736f6c63430008090033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 0x2A PUSH11 0xDFB90B267D07B6E0165849 0xD3 LOG1 0xDC 0x49 STOP MSIZE DUP5 CALLVALUE 0xA6 0xB8 0xAA PUSH17 0xA0491F68D49864736F6C63430008090033 ",
							"sourceMap": "194:8087:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b62a6adfb90b267d07b6e0165849d3a1dc4900598434a6b8aa70a0491f68d49864736f6c63430008090033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 0x2A PUSH11 0xDFB90B267D07B6E0165849 0xD3 LOG1 0xDC 0x49 STOP MSIZE DUP5 CALLVALUE 0xA6 0xB8 0xAA PUSH17 0xA0491F68D49864736F6C63430008090033 ",
							"sourceMap": "194:8087:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 3,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b62a6adfb90b267d07b6e0165849d3a1dc4900598434a6b8aa70a0491f68d49864736f6c63430008090033",
									".code": [
										{
											"begin": 194,
											"end": 8281,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 752,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/Contracts/Nether.sol": {
				"Nether": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"constructor": {
								"custom:oz-upgrades-unsafe-allow": "constructor"
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/Contracts/Nether.sol\":296:743  contract Nether is Initializable, PausableUpgradeable, OwnableUpgradeable {... */\n  mstore(0x40, 0x80)\n    /* \"src/Contracts/Nether.sol\":431:486  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"src/Contracts/Nether.sol\":456:478  _disableInitializers() */\n  tag_4\n    /* \"src/Contracts/Nether.sol\":456:476  _disableInitializers */\n  shl(0x20, tag_5)\n    /* \"src/Contracts/Nether.sol\":456:478  _disableInitializers() */\n  0x20\n  shr\n  jump\t// in\ntag_4:\n    /* \"src/Contracts/Nether.sol\":296:743  contract Nether is Initializable, PausableUpgradeable, OwnableUpgradeable {... */\n  jump(tag_6)\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5928:6207  function _disableInitializers() internal virtual {... */\ntag_5:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5996:6009  _initializing */\n  0x00\n  0x01\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xff\n  and\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5995:6009  !_initializing */\n  iszero\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5987:6053  require(!_initializing, \"Initializable: contract is initializing\") */\n  tag_8\n  jumpi\n  mload(0x40)\n  0x08c379a000000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_9\n  swap1\n  tag_10\n  jump\t// in\ntag_9:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_8:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6082:6097  type(uint8).max */\n  0xff\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6067:6097  _initialized < type(uint8).max */\n  dup1\n  and\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6067:6079  _initialized */\n  0x00\n  dup1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xff\n  and\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6067:6097  _initialized < type(uint8).max */\n  0xff\n  and\n  lt\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6063:6201  if (_initialized < type(uint8).max) {... */\n  iszero\n  tag_11\n  jumpi\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6128:6143  type(uint8).max */\n  0xff\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6113:6125  _initialized */\n  0x00\n  dup1\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6113:6143  _initialized = type(uint8).max */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6162:6190  Initialized(type(uint8).max) */\n  0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6174:6189  type(uint8).max */\n  0xff\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6162:6190  Initialized(type(uint8).max) */\n  mload(0x40)\n  tag_12\n  swap2\n  swap1\n  tag_13\n  jump\t// in\ntag_12:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log1\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6063:6201  if (_initialized < type(uint8).max) {... */\ntag_11:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5928:6207  function _disableInitializers() internal virtual {... */\n  jump\t// out\n    /* \"#utility.yul\":7:176   */\ntag_14:\n    /* \"#utility.yul\":91:102   */\n  0x00\n    /* \"#utility.yul\":125:131   */\n  dup3\n    /* \"#utility.yul\":120:123   */\n  dup3\n    /* \"#utility.yul\":113:132   */\n  mstore\n    /* \"#utility.yul\":165:169   */\n  0x20\n    /* \"#utility.yul\":160:163   */\n  dup3\n    /* \"#utility.yul\":156:170   */\n  add\n    /* \"#utility.yul\":141:170   */\n  swap1\n  pop\n    /* \"#utility.yul\":7:176   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":182:408   */\ntag_15:\n    /* \"#utility.yul\":322:356   */\n  0x496e697469616c697a61626c653a20636f6e747261637420697320696e697469\n    /* \"#utility.yul\":318:319   */\n  0x00\n    /* \"#utility.yul\":310:316   */\n  dup3\n    /* \"#utility.yul\":306:320   */\n  add\n    /* \"#utility.yul\":299:357   */\n  mstore\n    /* \"#utility.yul\":391:400   */\n  0x616c697a696e6700000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":386:388   */\n  0x20\n    /* \"#utility.yul\":378:384   */\n  dup3\n    /* \"#utility.yul\":374:389   */\n  add\n    /* \"#utility.yul\":367:401   */\n  mstore\n    /* \"#utility.yul\":182:408   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":414:780   */\ntag_16:\n    /* \"#utility.yul\":556:559   */\n  0x00\n    /* \"#utility.yul\":577:644   */\n  tag_23\n    /* \"#utility.yul\":641:643   */\n  0x27\n    /* \"#utility.yul\":636:639   */\n  dup4\n    /* \"#utility.yul\":577:644   */\n  tag_14\n  jump\t// in\ntag_23:\n    /* \"#utility.yul\":570:644   */\n  swap2\n  pop\n    /* \"#utility.yul\":653:746   */\n  tag_24\n    /* \"#utility.yul\":742:745   */\n  dup3\n    /* \"#utility.yul\":653:746   */\n  tag_15\n  jump\t// in\ntag_24:\n    /* \"#utility.yul\":771:773   */\n  0x40\n    /* \"#utility.yul\":766:769   */\n  dup3\n    /* \"#utility.yul\":762:774   */\n  add\n    /* \"#utility.yul\":755:774   */\n  swap1\n  pop\n    /* \"#utility.yul\":414:780   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":786:1205   */\ntag_10:\n    /* \"#utility.yul\":952:956   */\n  0x00\n    /* \"#utility.yul\":990:992   */\n  0x20\n    /* \"#utility.yul\":979:988   */\n  dup3\n    /* \"#utility.yul\":975:993   */\n  add\n    /* \"#utility.yul\":967:993   */\n  swap1\n  pop\n    /* \"#utility.yul\":1039:1048   */\n  dup2\n    /* \"#utility.yul\":1033:1037   */\n  dup2\n    /* \"#utility.yul\":1029:1049   */\n  sub\n    /* \"#utility.yul\":1025:1026   */\n  0x00\n    /* \"#utility.yul\":1014:1023   */\n  dup4\n    /* \"#utility.yul\":1010:1027   */\n  add\n    /* \"#utility.yul\":1003:1050   */\n  mstore\n    /* \"#utility.yul\":1067:1198   */\n  tag_26\n    /* \"#utility.yul\":1193:1197   */\n  dup2\n    /* \"#utility.yul\":1067:1198   */\n  tag_16\n  jump\t// in\ntag_26:\n    /* \"#utility.yul\":1059:1198   */\n  swap1\n  pop\n    /* \"#utility.yul\":786:1205   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1211:1297   */\ntag_17:\n    /* \"#utility.yul\":1246:1253   */\n  0x00\n    /* \"#utility.yul\":1286:1290   */\n  0xff\n    /* \"#utility.yul\":1279:1284   */\n  dup3\n    /* \"#utility.yul\":1275:1291   */\n  and\n    /* \"#utility.yul\":1264:1291   */\n  swap1\n  pop\n    /* \"#utility.yul\":1211:1297   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1303:1415   */\ntag_18:\n    /* \"#utility.yul\":1386:1408   */\n  tag_29\n    /* \"#utility.yul\":1402:1407   */\n  dup2\n    /* \"#utility.yul\":1386:1408   */\n  tag_17\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":1381:1384   */\n  dup3\n    /* \"#utility.yul\":1374:1409   */\n  mstore\n    /* \"#utility.yul\":1303:1415   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1421:1635   */\ntag_13:\n    /* \"#utility.yul\":1510:1514   */\n  0x00\n    /* \"#utility.yul\":1548:1550   */\n  0x20\n    /* \"#utility.yul\":1537:1546   */\n  dup3\n    /* \"#utility.yul\":1533:1551   */\n  add\n    /* \"#utility.yul\":1525:1551   */\n  swap1\n  pop\n    /* \"#utility.yul\":1561:1628   */\n  tag_31\n    /* \"#utility.yul\":1625:1626   */\n  0x00\n    /* \"#utility.yul\":1614:1623   */\n  dup4\n    /* \"#utility.yul\":1610:1627   */\n  add\n    /* \"#utility.yul\":1601:1607   */\n  dup5\n    /* \"#utility.yul\":1561:1628   */\n  tag_18\n  jump\t// in\ntag_31:\n    /* \"#utility.yul\":1421:1635   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"src/Contracts/Nether.sol\":296:743  contract Nether is Initializable, PausableUpgradeable, OwnableUpgradeable {... */\ntag_6:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/Contracts/Nether.sol\":296:743  contract Nether is Initializable, PausableUpgradeable, OwnableUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8129fc1c\n      gt\n      tag_10\n      jumpi\n      dup1\n      0x8129fc1c\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x8456cb59\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_9\n      jumpi\n      jump(tag_2)\n    tag_10:\n      dup1\n      0x3f4ba83a\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x5c975abb\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"src/Contracts/Nether.sol\":675:740  function unpause() public onlyOwner {... */\n    tag_3:\n      tag_11\n      tag_12\n      jump\t// in\n    tag_11:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1858:1942  function paused() public view virtual returns (bool) {... */\n    tag_4:\n      tag_13\n      tag_14\n      jump\t// in\n    tag_13:\n      mload(0x40)\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2071:2172  function renounceOwnership() public virtual onlyOwner {... */\n    tag_5:\n      tag_17\n      tag_18\n      jump\t// in\n    tag_17:\n      stop\n        /* \"src/Contracts/Nether.sol\":494:598  function initialize() initializer public {... */\n    tag_6:\n      tag_19\n      tag_20\n      jump\t// in\n    tag_19:\n      stop\n        /* \"src/Contracts/Nether.sol\":606:667  function pause() public onlyOwner {... */\n    tag_7:\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1441:1526  function owner() public view virtual returns (address) {... */\n    tag_8:\n      tag_23\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2519  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_9:\n      tag_27\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_28\n      swap2\n      swap1\n      tag_29\n      jump\t// in\n    tag_28:\n      tag_30\n      jump\t// in\n    tag_27:\n      stop\n        /* \"src/Contracts/Nether.sol\":675:740  function unpause() public onlyOwner {... */\n    tag_12:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_32\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_33\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_32:\n        /* \"src/Contracts/Nether.sol\":722:732  _unpause() */\n      tag_35\n        /* \"src/Contracts/Nether.sol\":722:730  _unpause */\n      tag_36\n        /* \"src/Contracts/Nether.sol\":722:732  _unpause() */\n      jump\t// in\n    tag_35:\n        /* \"src/Contracts/Nether.sol\":675:740  function unpause() public onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1858:1942  function paused() public view virtual returns (bool) {... */\n    tag_14:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1905:1909  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1928:1935  _paused */\n      0x33\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1921:1935  return _paused */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1858:1942  function paused() public view virtual returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2071:2172  function renounceOwnership() public virtual onlyOwner {... */\n    tag_18:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_39\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_33\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_39:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2135:2165  _transferOwnership(address(0)) */\n      tag_41\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2162:2163  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2135:2153  _transferOwnership */\n      tag_42\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2135:2165  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_41:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2071:2172  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"src/Contracts/Nether.sol\":494:598  function initialize() initializer public {... */\n    tag_20:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3268:3287  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3291:3304  _initializing */\n      dup1\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3290:3304  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3268:3304  bool isTopLevelCall = !_initializing */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3336:3350  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3336:3370  isTopLevelCall && _initialized < 1 */\n      dup1\n      iszero\n      tag_44\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3369:3370  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3354:3366  _initialized */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3354:3370  _initialized < 1 */\n      0xff\n      and\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3336:3370  isTopLevelCall && _initialized < 1 */\n    tag_44:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3335:3443  (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1) */\n      dup1\n      tag_45\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3377:3421  AddressUpgradeable.isContract(address(this)) */\n      tag_46\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3415:3419  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3377:3406  AddressUpgradeable.isContract */\n      tag_47\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3377:3421  AddressUpgradeable.isContract(address(this)) */\n      jump\t// in\n    tag_46:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3376:3421  !AddressUpgradeable.isContract(address(this)) */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3376:3442  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n      dup1\n      iszero\n      tag_48\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3441:3442  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3425:3437  _initialized */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3425:3442  _initialized == 1 */\n      0xff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3376:3442  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n    tag_48:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3335:3443  (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1) */\n    tag_45:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3314:3515  require(... */\n      tag_49\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_50\n      swap1\n      tag_51\n      jump\t// in\n    tag_50:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_49:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3540:3541  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3525:3537  _initialized */\n      0x00\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3525:3541  _initialized = 1 */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3555:3569  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3551:3616  if (isTopLevelCall) {... */\n      iszero\n      tag_52\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3601:3605  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3585:3598  _initializing */\n      0x00\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3585:3605  _initializing = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3551:3616  if (isTopLevelCall) {... */\n    tag_52:\n        /* \"src/Contracts/Nether.sol\":546:563  __Pausable_init() */\n      tag_54\n        /* \"src/Contracts/Nether.sol\":546:561  __Pausable_init */\n      tag_55\n        /* \"src/Contracts/Nether.sol\":546:563  __Pausable_init() */\n      jump\t// in\n    tag_54:\n        /* \"src/Contracts/Nether.sol\":574:590  __Ownable_init() */\n      tag_56\n        /* \"src/Contracts/Nether.sol\":574:588  __Ownable_init */\n      tag_57\n        /* \"src/Contracts/Nether.sol\":574:590  __Ownable_init() */\n      jump\t// in\n    tag_56:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3640:3654  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3636:3735  if (isTopLevelCall) {... */\n      iszero\n      tag_58\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3686:3691  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3670:3683  _initializing */\n      dup1\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3670:3691  _initializing = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3710:3724  Initialized(1) */\n      0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3722:3723  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3710:3724  Initialized(1) */\n      mload(0x40)\n      tag_59\n      swap2\n      swap1\n      tag_60\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3636:3735  if (isTopLevelCall) {... */\n    tag_58:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3258:3741  {... */\n      pop\n        /* \"src/Contracts/Nether.sol\":494:598  function initialize() initializer public {... */\n      jump\t// out\n        /* \"src/Contracts/Nether.sol\":606:667  function pause() public onlyOwner {... */\n    tag_22:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_62\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_33\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_62:\n        /* \"src/Contracts/Nether.sol\":651:659  _pause() */\n      tag_64\n        /* \"src/Contracts/Nether.sol\":651:657  _pause */\n      tag_65\n        /* \"src/Contracts/Nether.sol\":651:659  _pause() */\n      jump\t// in\n    tag_64:\n        /* \"src/Contracts/Nether.sol\":606:667  function pause() public onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1441:1526  function owner() public view virtual returns (address) {... */\n    tag_24:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1487:1494  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1513:1519  _owner */\n      0x65\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1519  return _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1441:1526  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2519  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_30:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_68\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_33\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_68:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2429:2430  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2409:2431  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2409:2417  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2409:2431  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2401:2474  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_70\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_71\n      swap1\n      tag_72\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_70:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2484:2512  _transferOwnership(newOwner) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2503:2511  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2484:2502  _transferOwnership */\n      tag_42\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2484:2512  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_73:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2519  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1599:1729  function _checkOwner() internal view virtual {... */\n    tag_33:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1673:1685  _msgSender() */\n      tag_75\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1673:1683  _msgSender */\n      tag_76\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1673:1685  _msgSender() */\n      jump\t// in\n    tag_75:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1662:1685  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1662:1669  owner() */\n      tag_77\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1662:1667  owner */\n      tag_24\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1662:1669  owner() */\n      jump\t// in\n    tag_77:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1662:1685  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1654:1722  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_78\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_79\n      swap1\n      tag_80\n      jump\t// in\n    tag_79:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_78:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1599:1729  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2676:2793  function _unpause() internal virtual whenPaused {... */\n    tag_36:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1729:1745  _requirePaused() */\n      tag_82\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1729:1743  _requirePaused */\n      tag_83\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1729:1745  _requirePaused() */\n      jump\t// in\n    tag_82:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2744:2749  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2734:2741  _paused */\n      0x33\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2734:2749  _paused = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2764:2786  Unpaused(_msgSender()) */\n      0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2773:2785  _msgSender() */\n      tag_85\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2773:2783  _msgSender */\n      tag_76\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2773:2785  _msgSender() */\n      jump\t// in\n    tag_85:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2764:2786  Unpaused(_msgSender()) */\n      mload(0x40)\n      tag_86\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_86:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2676:2793  function _unpause() internal virtual whenPaused {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2673:2860  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_42:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2746:2762  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2765:2771  _owner */\n      0x65\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2746:2771  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2790:2798  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2781:2787  _owner */\n      0x65\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2781:2798  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2844:2852  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2813:2853  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2834:2842  oldOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2813:2853  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2736:2860  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2673:2860  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1186:1506  function isContract(address account) internal view returns (bool) {... */\n    tag_47:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1246:1250  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1498:1499  0 */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1483  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1495  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1499  account.code.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1469:1499  return account.code.length > 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1186:1506  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1063:1160  function __Pausable_init() internal onlyInitializing {... */\n    tag_55:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5363:5376  _initializing */\n      0x00\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5355:5424  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_90\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_91\n      swap1\n      tag_92\n      jump\t// in\n    tag_91:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_90:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1126:1153  __Pausable_init_unchained() */\n      tag_94\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1126:1151  __Pausable_init_unchained */\n      tag_95\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1126:1153  __Pausable_init_unchained() */\n      jump\t// in\n    tag_94:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1063:1160  function __Pausable_init() internal onlyInitializing {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1003:1098  function __Ownable_init() internal onlyInitializing {... */\n    tag_57:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5363:5376  _initializing */\n      0x00\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5355:5424  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_97\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_98\n      swap1\n      tag_92\n      jump\t// in\n    tag_98:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_97:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1065:1091  __Ownable_init_unchained() */\n      tag_100\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1065:1089  __Ownable_init_unchained */\n      tag_101\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1065:1091  __Ownable_init_unchained() */\n      jump\t// in\n    tag_100:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1003:1098  function __Ownable_init() internal onlyInitializing {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2429:2544  function _pause() internal virtual whenNotPaused {... */\n    tag_65:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1482:1501  _requireNotPaused() */\n      tag_103\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1482:1499  _requireNotPaused */\n      tag_104\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1482:1501  _requireNotPaused() */\n      jump\t// in\n    tag_103:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2498:2502  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2488:2495  _paused */\n      0x33\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2488:2502  _paused = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2517:2537  Paused(_msgSender()) */\n      0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2524:2536  _msgSender() */\n      tag_106\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2524:2534  _msgSender */\n      tag_76\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2524:2536  _msgSender() */\n      jump\t// in\n    tag_106:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2517:2537  Paused(_msgSender()) */\n      mload(0x40)\n      tag_107\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_107:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2429:2544  function _pause() internal virtual whenNotPaused {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":850:946  function _msgSender() internal view virtual returns (address) {... */\n    tag_76:\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":903:910  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":922:939  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":850:946  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2188:2294  function _requirePaused() internal view virtual {... */\n    tag_83:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2254:2262  paused() */\n      tag_110\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2254:2260  paused */\n      tag_14\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2254:2262  paused() */\n      jump\t// in\n    tag_110:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2246:2287  require(paused(), \"Pausable: not paused\") */\n      tag_111\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_112\n      swap1\n      tag_113\n      jump\t// in\n    tag_112:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_111:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2188:2294  function _requirePaused() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1166:1261  function __Pausable_init_unchained() internal onlyInitializing {... */\n    tag_95:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5363:5376  _initializing */\n      0x00\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5355:5424  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_115\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_116\n      swap1\n      tag_92\n      jump\t// in\n    tag_116:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_115:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1249:1254  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1239:1246  _paused */\n      0x33\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1239:1254  _paused = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1166:1261  function __Pausable_init_unchained() internal onlyInitializing {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1104:1215  function __Ownable_init_unchained() internal onlyInitializing {... */\n    tag_101:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5363:5376  _initializing */\n      0x00\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5355:5424  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap1\n      tag_92\n      jump\t// in\n    tag_120:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1176:1208  _transferOwnership(_msgSender()) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1195:1207  _msgSender() */\n      tag_123\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1195:1205  _msgSender */\n      tag_76\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1195:1207  _msgSender() */\n      jump\t// in\n    tag_123:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1176:1194  _transferOwnership */\n      tag_42\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1176:1208  _transferOwnership(_msgSender()) */\n      jump\t// in\n    tag_122:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1104:1215  function __Ownable_init_unchained() internal onlyInitializing {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2010:2116  function _requireNotPaused() internal view virtual {... */\n    tag_104:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2080:2088  paused() */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2080:2086  paused */\n      tag_14\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2080:2088  paused() */\n      jump\t// in\n    tag_125:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2079:2088  !paused() */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2071:2109  require(!paused(), \"Pausable: paused\") */\n      tag_126\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_127\n      swap1\n      tag_128\n      jump\t// in\n    tag_127:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_126:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":2010:2116  function _requireNotPaused() internal view virtual {... */\n      jump\t// out\n        /* \"#utility.yul\":7:97   */\n    tag_129:\n        /* \"#utility.yul\":41:48   */\n      0x00\n        /* \"#utility.yul\":84:89   */\n      dup2\n        /* \"#utility.yul\":77:90   */\n      iszero\n        /* \"#utility.yul\":70:91   */\n      iszero\n        /* \"#utility.yul\":59:91   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:97   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":103:212   */\n    tag_130:\n        /* \"#utility.yul\":184:205   */\n      tag_160\n        /* \"#utility.yul\":199:204   */\n      dup2\n        /* \"#utility.yul\":184:205   */\n      tag_129\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":179:182   */\n      dup3\n        /* \"#utility.yul\":172:206   */\n      mstore\n        /* \"#utility.yul\":103:212   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":218:428   */\n    tag_16:\n        /* \"#utility.yul\":305:309   */\n      0x00\n        /* \"#utility.yul\":343:345   */\n      0x20\n        /* \"#utility.yul\":332:341   */\n      dup3\n        /* \"#utility.yul\":328:346   */\n      add\n        /* \"#utility.yul\":320:346   */\n      swap1\n      pop\n        /* \"#utility.yul\":356:421   */\n      tag_162\n        /* \"#utility.yul\":418:419   */\n      0x00\n        /* \"#utility.yul\":407:416   */\n      dup4\n        /* \"#utility.yul\":403:420   */\n      add\n        /* \"#utility.yul\":394:400   */\n      dup5\n        /* \"#utility.yul\":356:421   */\n      tag_130\n      jump\t// in\n    tag_162:\n        /* \"#utility.yul\":218:428   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":434:560   */\n    tag_131:\n        /* \"#utility.yul\":471:478   */\n      0x00\n        /* \"#utility.yul\":511:553   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":504:509   */\n      dup3\n        /* \"#utility.yul\":500:554   */\n      and\n        /* \"#utility.yul\":489:554   */\n      swap1\n      pop\n        /* \"#utility.yul\":434:560   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":566:662   */\n    tag_132:\n        /* \"#utility.yul\":603:610   */\n      0x00\n        /* \"#utility.yul\":632:656   */\n      tag_165\n        /* \"#utility.yul\":650:655   */\n      dup3\n        /* \"#utility.yul\":632:656   */\n      tag_131\n      jump\t// in\n    tag_165:\n        /* \"#utility.yul\":621:656   */\n      swap1\n      pop\n        /* \"#utility.yul\":566:662   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":668:786   */\n    tag_133:\n        /* \"#utility.yul\":755:779   */\n      tag_167\n        /* \"#utility.yul\":773:778   */\n      dup2\n        /* \"#utility.yul\":755:779   */\n      tag_132\n      jump\t// in\n    tag_167:\n        /* \"#utility.yul\":750:753   */\n      dup3\n        /* \"#utility.yul\":743:780   */\n      mstore\n        /* \"#utility.yul\":668:786   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":792:1014   */\n    tag_26:\n        /* \"#utility.yul\":885:889   */\n      0x00\n        /* \"#utility.yul\":923:925   */\n      0x20\n        /* \"#utility.yul\":912:921   */\n      dup3\n        /* \"#utility.yul\":908:926   */\n      add\n        /* \"#utility.yul\":900:926   */\n      swap1\n      pop\n        /* \"#utility.yul\":936:1007   */\n      tag_169\n        /* \"#utility.yul\":1004:1005   */\n      0x00\n        /* \"#utility.yul\":993:1002   */\n      dup4\n        /* \"#utility.yul\":989:1006   */\n      add\n        /* \"#utility.yul\":980:986   */\n      dup5\n        /* \"#utility.yul\":936:1007   */\n      tag_133\n      jump\t// in\n    tag_169:\n        /* \"#utility.yul\":792:1014   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1101:1218   */\n    tag_135:\n        /* \"#utility.yul\":1210:1211   */\n      0x00\n        /* \"#utility.yul\":1207:1208   */\n      dup1\n        /* \"#utility.yul\":1200:1212   */\n      revert\n        /* \"#utility.yul\":1347:1469   */\n    tag_137:\n        /* \"#utility.yul\":1420:1444   */\n      tag_174\n        /* \"#utility.yul\":1438:1443   */\n      dup2\n        /* \"#utility.yul\":1420:1444   */\n      tag_132\n      jump\t// in\n    tag_174:\n        /* \"#utility.yul\":1413:1418   */\n      dup2\n        /* \"#utility.yul\":1410:1445   */\n      eq\n        /* \"#utility.yul\":1400:1463   */\n      tag_175\n      jumpi\n        /* \"#utility.yul\":1459:1460   */\n      0x00\n        /* \"#utility.yul\":1456:1457   */\n      dup1\n        /* \"#utility.yul\":1449:1461   */\n      revert\n        /* \"#utility.yul\":1400:1463   */\n    tag_175:\n        /* \"#utility.yul\":1347:1469   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1475:1614   */\n    tag_138:\n        /* \"#utility.yul\":1521:1526   */\n      0x00\n        /* \"#utility.yul\":1559:1565   */\n      dup2\n        /* \"#utility.yul\":1546:1566   */\n      calldataload\n        /* \"#utility.yul\":1537:1566   */\n      swap1\n      pop\n        /* \"#utility.yul\":1575:1608   */\n      tag_177\n        /* \"#utility.yul\":1602:1607   */\n      dup2\n        /* \"#utility.yul\":1575:1608   */\n      tag_137\n      jump\t// in\n    tag_177:\n        /* \"#utility.yul\":1475:1614   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1620:1949   */\n    tag_29:\n        /* \"#utility.yul\":1679:1685   */\n      0x00\n        /* \"#utility.yul\":1728:1730   */\n      0x20\n        /* \"#utility.yul\":1716:1725   */\n      dup3\n        /* \"#utility.yul\":1707:1714   */\n      dup5\n        /* \"#utility.yul\":1703:1726   */\n      sub\n        /* \"#utility.yul\":1699:1731   */\n      slt\n        /* \"#utility.yul\":1696:1815   */\n      iszero\n      tag_179\n      jumpi\n        /* \"#utility.yul\":1734:1813   */\n      tag_180\n      tag_135\n      jump\t// in\n    tag_180:\n        /* \"#utility.yul\":1696:1815   */\n    tag_179:\n        /* \"#utility.yul\":1854:1855   */\n      0x00\n        /* \"#utility.yul\":1879:1932   */\n      tag_181\n        /* \"#utility.yul\":1924:1931   */\n      dup5\n        /* \"#utility.yul\":1915:1921   */\n      dup3\n        /* \"#utility.yul\":1904:1913   */\n      dup6\n        /* \"#utility.yul\":1900:1922   */\n      add\n        /* \"#utility.yul\":1879:1932   */\n      tag_138\n      jump\t// in\n    tag_181:\n        /* \"#utility.yul\":1869:1932   */\n      swap2\n      pop\n        /* \"#utility.yul\":1825:1942   */\n      pop\n        /* \"#utility.yul\":1620:1949   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1955:2124   */\n    tag_139:\n        /* \"#utility.yul\":2039:2050   */\n      0x00\n        /* \"#utility.yul\":2073:2079   */\n      dup3\n        /* \"#utility.yul\":2068:2071   */\n      dup3\n        /* \"#utility.yul\":2061:2080   */\n      mstore\n        /* \"#utility.yul\":2113:2117   */\n      0x20\n        /* \"#utility.yul\":2108:2111   */\n      dup3\n        /* \"#utility.yul\":2104:2118   */\n      add\n        /* \"#utility.yul\":2089:2118   */\n      swap1\n      pop\n        /* \"#utility.yul\":1955:2124   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2130:2363   */\n    tag_140:\n        /* \"#utility.yul\":2270:2304   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":2266:2267   */\n      0x00\n        /* \"#utility.yul\":2258:2264   */\n      dup3\n        /* \"#utility.yul\":2254:2268   */\n      add\n        /* \"#utility.yul\":2247:2305   */\n      mstore\n        /* \"#utility.yul\":2339:2355   */\n      0x647920696e697469616c697a6564000000000000000000000000000000000000\n        /* \"#utility.yul\":2334:2336   */\n      0x20\n        /* \"#utility.yul\":2326:2332   */\n      dup3\n        /* \"#utility.yul\":2322:2337   */\n      add\n        /* \"#utility.yul\":2315:2356   */\n      mstore\n        /* \"#utility.yul\":2130:2363   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2369:2735   */\n    tag_141:\n        /* \"#utility.yul\":2511:2514   */\n      0x00\n        /* \"#utility.yul\":2532:2599   */\n      tag_185\n        /* \"#utility.yul\":2596:2598   */\n      0x2e\n        /* \"#utility.yul\":2591:2594   */\n      dup4\n        /* \"#utility.yul\":2532:2599   */\n      tag_139\n      jump\t// in\n    tag_185:\n        /* \"#utility.yul\":2525:2599   */\n      swap2\n      pop\n        /* \"#utility.yul\":2608:2701   */\n      tag_186\n        /* \"#utility.yul\":2697:2700   */\n      dup3\n        /* \"#utility.yul\":2608:2701   */\n      tag_140\n      jump\t// in\n    tag_186:\n        /* \"#utility.yul\":2726:2728   */\n      0x40\n        /* \"#utility.yul\":2721:2724   */\n      dup3\n        /* \"#utility.yul\":2717:2729   */\n      add\n        /* \"#utility.yul\":2710:2729   */\n      swap1\n      pop\n        /* \"#utility.yul\":2369:2735   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2741:3160   */\n    tag_51:\n        /* \"#utility.yul\":2907:2911   */\n      0x00\n        /* \"#utility.yul\":2945:2947   */\n      0x20\n        /* \"#utility.yul\":2934:2943   */\n      dup3\n        /* \"#utility.yul\":2930:2948   */\n      add\n        /* \"#utility.yul\":2922:2948   */\n      swap1\n      pop\n        /* \"#utility.yul\":2994:3003   */\n      dup2\n        /* \"#utility.yul\":2988:2992   */\n      dup2\n        /* \"#utility.yul\":2984:3004   */\n      sub\n        /* \"#utility.yul\":2980:2981   */\n      0x00\n        /* \"#utility.yul\":2969:2978   */\n      dup4\n        /* \"#utility.yul\":2965:2982   */\n      add\n        /* \"#utility.yul\":2958:3005   */\n      mstore\n        /* \"#utility.yul\":3022:3153   */\n      tag_188\n        /* \"#utility.yul\":3148:3152   */\n      dup2\n        /* \"#utility.yul\":3022:3153   */\n      tag_141\n      jump\t// in\n    tag_188:\n        /* \"#utility.yul\":3014:3153   */\n      swap1\n      pop\n        /* \"#utility.yul\":2741:3160   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3166:3251   */\n    tag_142:\n        /* \"#utility.yul\":3211:3218   */\n      0x00\n        /* \"#utility.yul\":3240:3245   */\n      dup2\n        /* \"#utility.yul\":3229:3245   */\n      swap1\n      pop\n        /* \"#utility.yul\":3166:3251   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3257:3343   */\n    tag_143:\n        /* \"#utility.yul\":3292:3299   */\n      0x00\n        /* \"#utility.yul\":3332:3336   */\n      0xff\n        /* \"#utility.yul\":3325:3330   */\n      dup3\n        /* \"#utility.yul\":3321:3337   */\n      and\n        /* \"#utility.yul\":3310:3337   */\n      swap1\n      pop\n        /* \"#utility.yul\":3257:3343   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3349:3409   */\n    tag_144:\n        /* \"#utility.yul\":3377:3380   */\n      0x00\n        /* \"#utility.yul\":3398:3403   */\n      dup2\n        /* \"#utility.yul\":3391:3403   */\n      swap1\n      pop\n        /* \"#utility.yul\":3349:3409   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3415:3569   */\n    tag_145:\n        /* \"#utility.yul\":3471:3480   */\n      0x00\n        /* \"#utility.yul\":3504:3563   */\n      tag_193\n        /* \"#utility.yul\":3520:3562   */\n      tag_194\n        /* \"#utility.yul\":3529:3561   */\n      tag_195\n        /* \"#utility.yul\":3555:3560   */\n      dup5\n        /* \"#utility.yul\":3529:3561   */\n      tag_142\n      jump\t// in\n    tag_195:\n        /* \"#utility.yul\":3520:3562   */\n      tag_144\n      jump\t// in\n    tag_194:\n        /* \"#utility.yul\":3504:3563   */\n      tag_143\n      jump\t// in\n    tag_193:\n        /* \"#utility.yul\":3491:3563   */\n      swap1\n      pop\n        /* \"#utility.yul\":3415:3569   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3575:3718   */\n    tag_146:\n        /* \"#utility.yul\":3668:3711   */\n      tag_197\n        /* \"#utility.yul\":3705:3710   */\n      dup2\n        /* \"#utility.yul\":3668:3711   */\n      tag_145\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":3663:3666   */\n      dup3\n        /* \"#utility.yul\":3656:3712   */\n      mstore\n        /* \"#utility.yul\":3575:3718   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3724:3958   */\n    tag_60:\n        /* \"#utility.yul\":3823:3827   */\n      0x00\n        /* \"#utility.yul\":3861:3863   */\n      0x20\n        /* \"#utility.yul\":3850:3859   */\n      dup3\n        /* \"#utility.yul\":3846:3864   */\n      add\n        /* \"#utility.yul\":3838:3864   */\n      swap1\n      pop\n        /* \"#utility.yul\":3874:3951   */\n      tag_199\n        /* \"#utility.yul\":3948:3949   */\n      0x00\n        /* \"#utility.yul\":3937:3946   */\n      dup4\n        /* \"#utility.yul\":3933:3950   */\n      add\n        /* \"#utility.yul\":3924:3930   */\n      dup5\n        /* \"#utility.yul\":3874:3951   */\n      tag_146\n      jump\t// in\n    tag_199:\n        /* \"#utility.yul\":3724:3958   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3964:4189   */\n    tag_147:\n        /* \"#utility.yul\":4104:4138   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":4100:4101   */\n      0x00\n        /* \"#utility.yul\":4092:4098   */\n      dup3\n        /* \"#utility.yul\":4088:4102   */\n      add\n        /* \"#utility.yul\":4081:4139   */\n      mstore\n        /* \"#utility.yul\":4173:4181   */\n      0x6464726573730000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4168:4170   */\n      0x20\n        /* \"#utility.yul\":4160:4166   */\n      dup3\n        /* \"#utility.yul\":4156:4171   */\n      add\n        /* \"#utility.yul\":4149:4182   */\n      mstore\n        /* \"#utility.yul\":3964:4189   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4195:4561   */\n    tag_148:\n        /* \"#utility.yul\":4337:4340   */\n      0x00\n        /* \"#utility.yul\":4358:4425   */\n      tag_202\n        /* \"#utility.yul\":4422:4424   */\n      0x26\n        /* \"#utility.yul\":4417:4420   */\n      dup4\n        /* \"#utility.yul\":4358:4425   */\n      tag_139\n      jump\t// in\n    tag_202:\n        /* \"#utility.yul\":4351:4425   */\n      swap2\n      pop\n        /* \"#utility.yul\":4434:4527   */\n      tag_203\n        /* \"#utility.yul\":4523:4526   */\n      dup3\n        /* \"#utility.yul\":4434:4527   */\n      tag_147\n      jump\t// in\n    tag_203:\n        /* \"#utility.yul\":4552:4554   */\n      0x40\n        /* \"#utility.yul\":4547:4550   */\n      dup3\n        /* \"#utility.yul\":4543:4555   */\n      add\n        /* \"#utility.yul\":4536:4555   */\n      swap1\n      pop\n        /* \"#utility.yul\":4195:4561   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4567:4986   */\n    tag_72:\n        /* \"#utility.yul\":4733:4737   */\n      0x00\n        /* \"#utility.yul\":4771:4773   */\n      0x20\n        /* \"#utility.yul\":4760:4769   */\n      dup3\n        /* \"#utility.yul\":4756:4774   */\n      add\n        /* \"#utility.yul\":4748:4774   */\n      swap1\n      pop\n        /* \"#utility.yul\":4820:4829   */\n      dup2\n        /* \"#utility.yul\":4814:4818   */\n      dup2\n        /* \"#utility.yul\":4810:4830   */\n      sub\n        /* \"#utility.yul\":4806:4807   */\n      0x00\n        /* \"#utility.yul\":4795:4804   */\n      dup4\n        /* \"#utility.yul\":4791:4808   */\n      add\n        /* \"#utility.yul\":4784:4831   */\n      mstore\n        /* \"#utility.yul\":4848:4979   */\n      tag_205\n        /* \"#utility.yul\":4974:4978   */\n      dup2\n        /* \"#utility.yul\":4848:4979   */\n      tag_148\n      jump\t// in\n    tag_205:\n        /* \"#utility.yul\":4840:4979   */\n      swap1\n      pop\n        /* \"#utility.yul\":4567:4986   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4992:5174   */\n    tag_149:\n        /* \"#utility.yul\":5132:5166   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":5128:5129   */\n      0x00\n        /* \"#utility.yul\":5120:5126   */\n      dup3\n        /* \"#utility.yul\":5116:5130   */\n      add\n        /* \"#utility.yul\":5109:5167   */\n      mstore\n        /* \"#utility.yul\":4992:5174   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5180:5546   */\n    tag_150:\n        /* \"#utility.yul\":5322:5325   */\n      0x00\n        /* \"#utility.yul\":5343:5410   */\n      tag_208\n        /* \"#utility.yul\":5407:5409   */\n      0x20\n        /* \"#utility.yul\":5402:5405   */\n      dup4\n        /* \"#utility.yul\":5343:5410   */\n      tag_139\n      jump\t// in\n    tag_208:\n        /* \"#utility.yul\":5336:5410   */\n      swap2\n      pop\n        /* \"#utility.yul\":5419:5512   */\n      tag_209\n        /* \"#utility.yul\":5508:5511   */\n      dup3\n        /* \"#utility.yul\":5419:5512   */\n      tag_149\n      jump\t// in\n    tag_209:\n        /* \"#utility.yul\":5537:5539   */\n      0x20\n        /* \"#utility.yul\":5532:5535   */\n      dup3\n        /* \"#utility.yul\":5528:5540   */\n      add\n        /* \"#utility.yul\":5521:5540   */\n      swap1\n      pop\n        /* \"#utility.yul\":5180:5546   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5552:5971   */\n    tag_80:\n        /* \"#utility.yul\":5718:5722   */\n      0x00\n        /* \"#utility.yul\":5756:5758   */\n      0x20\n        /* \"#utility.yul\":5745:5754   */\n      dup3\n        /* \"#utility.yul\":5741:5759   */\n      add\n        /* \"#utility.yul\":5733:5759   */\n      swap1\n      pop\n        /* \"#utility.yul\":5805:5814   */\n      dup2\n        /* \"#utility.yul\":5799:5803   */\n      dup2\n        /* \"#utility.yul\":5795:5815   */\n      sub\n        /* \"#utility.yul\":5791:5792   */\n      0x00\n        /* \"#utility.yul\":5780:5789   */\n      dup4\n        /* \"#utility.yul\":5776:5793   */\n      add\n        /* \"#utility.yul\":5769:5816   */\n      mstore\n        /* \"#utility.yul\":5833:5964   */\n      tag_211\n        /* \"#utility.yul\":5959:5963   */\n      dup2\n        /* \"#utility.yul\":5833:5964   */\n      tag_150\n      jump\t// in\n    tag_211:\n        /* \"#utility.yul\":5825:5964   */\n      swap1\n      pop\n        /* \"#utility.yul\":5552:5971   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5977:6207   */\n    tag_151:\n        /* \"#utility.yul\":6117:6151   */\n      0x496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069\n        /* \"#utility.yul\":6113:6114   */\n      0x00\n        /* \"#utility.yul\":6105:6111   */\n      dup3\n        /* \"#utility.yul\":6101:6115   */\n      add\n        /* \"#utility.yul\":6094:6152   */\n      mstore\n        /* \"#utility.yul\":6186:6199   */\n      0x6e697469616c697a696e67000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6181:6183   */\n      0x20\n        /* \"#utility.yul\":6173:6179   */\n      dup3\n        /* \"#utility.yul\":6169:6184   */\n      add\n        /* \"#utility.yul\":6162:6200   */\n      mstore\n        /* \"#utility.yul\":5977:6207   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6213:6579   */\n    tag_152:\n        /* \"#utility.yul\":6355:6358   */\n      0x00\n        /* \"#utility.yul\":6376:6443   */\n      tag_214\n        /* \"#utility.yul\":6440:6442   */\n      0x2b\n        /* \"#utility.yul\":6435:6438   */\n      dup4\n        /* \"#utility.yul\":6376:6443   */\n      tag_139\n      jump\t// in\n    tag_214:\n        /* \"#utility.yul\":6369:6443   */\n      swap2\n      pop\n        /* \"#utility.yul\":6452:6545   */\n      tag_215\n        /* \"#utility.yul\":6541:6544   */\n      dup3\n        /* \"#utility.yul\":6452:6545   */\n      tag_151\n      jump\t// in\n    tag_215:\n        /* \"#utility.yul\":6570:6572   */\n      0x40\n        /* \"#utility.yul\":6565:6568   */\n      dup3\n        /* \"#utility.yul\":6561:6573   */\n      add\n        /* \"#utility.yul\":6554:6573   */\n      swap1\n      pop\n        /* \"#utility.yul\":6213:6579   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6585:7004   */\n    tag_92:\n        /* \"#utility.yul\":6751:6755   */\n      0x00\n        /* \"#utility.yul\":6789:6791   */\n      0x20\n        /* \"#utility.yul\":6778:6787   */\n      dup3\n        /* \"#utility.yul\":6774:6792   */\n      add\n        /* \"#utility.yul\":6766:6792   */\n      swap1\n      pop\n        /* \"#utility.yul\":6838:6847   */\n      dup2\n        /* \"#utility.yul\":6832:6836   */\n      dup2\n        /* \"#utility.yul\":6828:6848   */\n      sub\n        /* \"#utility.yul\":6824:6825   */\n      0x00\n        /* \"#utility.yul\":6813:6822   */\n      dup4\n        /* \"#utility.yul\":6809:6826   */\n      add\n        /* \"#utility.yul\":6802:6849   */\n      mstore\n        /* \"#utility.yul\":6866:6997   */\n      tag_217\n        /* \"#utility.yul\":6992:6996   */\n      dup2\n        /* \"#utility.yul\":6866:6997   */\n      tag_152\n      jump\t// in\n    tag_217:\n        /* \"#utility.yul\":6858:6997   */\n      swap1\n      pop\n        /* \"#utility.yul\":6585:7004   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7010:7180   */\n    tag_153:\n        /* \"#utility.yul\":7150:7172   */\n      0x5061757361626c653a206e6f7420706175736564000000000000000000000000\n        /* \"#utility.yul\":7146:7147   */\n      0x00\n        /* \"#utility.yul\":7138:7144   */\n      dup3\n        /* \"#utility.yul\":7134:7148   */\n      add\n        /* \"#utility.yul\":7127:7173   */\n      mstore\n        /* \"#utility.yul\":7010:7180   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7186:7552   */\n    tag_154:\n        /* \"#utility.yul\":7328:7331   */\n      0x00\n        /* \"#utility.yul\":7349:7416   */\n      tag_220\n        /* \"#utility.yul\":7413:7415   */\n      0x14\n        /* \"#utility.yul\":7408:7411   */\n      dup4\n        /* \"#utility.yul\":7349:7416   */\n      tag_139\n      jump\t// in\n    tag_220:\n        /* \"#utility.yul\":7342:7416   */\n      swap2\n      pop\n        /* \"#utility.yul\":7425:7518   */\n      tag_221\n        /* \"#utility.yul\":7514:7517   */\n      dup3\n        /* \"#utility.yul\":7425:7518   */\n      tag_153\n      jump\t// in\n    tag_221:\n        /* \"#utility.yul\":7543:7545   */\n      0x20\n        /* \"#utility.yul\":7538:7541   */\n      dup3\n        /* \"#utility.yul\":7534:7546   */\n      add\n        /* \"#utility.yul\":7527:7546   */\n      swap1\n      pop\n        /* \"#utility.yul\":7186:7552   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7558:7977   */\n    tag_113:\n        /* \"#utility.yul\":7724:7728   */\n      0x00\n        /* \"#utility.yul\":7762:7764   */\n      0x20\n        /* \"#utility.yul\":7751:7760   */\n      dup3\n        /* \"#utility.yul\":7747:7765   */\n      add\n        /* \"#utility.yul\":7739:7765   */\n      swap1\n      pop\n        /* \"#utility.yul\":7811:7820   */\n      dup2\n        /* \"#utility.yul\":7805:7809   */\n      dup2\n        /* \"#utility.yul\":7801:7821   */\n      sub\n        /* \"#utility.yul\":7797:7798   */\n      0x00\n        /* \"#utility.yul\":7786:7795   */\n      dup4\n        /* \"#utility.yul\":7782:7799   */\n      add\n        /* \"#utility.yul\":7775:7822   */\n      mstore\n        /* \"#utility.yul\":7839:7970   */\n      tag_223\n        /* \"#utility.yul\":7965:7969   */\n      dup2\n        /* \"#utility.yul\":7839:7970   */\n      tag_154\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":7831:7970   */\n      swap1\n      pop\n        /* \"#utility.yul\":7558:7977   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7983:8149   */\n    tag_155:\n        /* \"#utility.yul\":8123:8141   */\n      0x5061757361626c653a2070617573656400000000000000000000000000000000\n        /* \"#utility.yul\":8119:8120   */\n      0x00\n        /* \"#utility.yul\":8111:8117   */\n      dup3\n        /* \"#utility.yul\":8107:8121   */\n      add\n        /* \"#utility.yul\":8100:8142   */\n      mstore\n        /* \"#utility.yul\":7983:8149   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8155:8521   */\n    tag_156:\n        /* \"#utility.yul\":8297:8300   */\n      0x00\n        /* \"#utility.yul\":8318:8385   */\n      tag_226\n        /* \"#utility.yul\":8382:8384   */\n      0x10\n        /* \"#utility.yul\":8377:8380   */\n      dup4\n        /* \"#utility.yul\":8318:8385   */\n      tag_139\n      jump\t// in\n    tag_226:\n        /* \"#utility.yul\":8311:8385   */\n      swap2\n      pop\n        /* \"#utility.yul\":8394:8487   */\n      tag_227\n        /* \"#utility.yul\":8483:8486   */\n      dup3\n        /* \"#utility.yul\":8394:8487   */\n      tag_155\n      jump\t// in\n    tag_227:\n        /* \"#utility.yul\":8512:8514   */\n      0x20\n        /* \"#utility.yul\":8507:8510   */\n      dup3\n        /* \"#utility.yul\":8503:8515   */\n      add\n        /* \"#utility.yul\":8496:8515   */\n      swap1\n      pop\n        /* \"#utility.yul\":8155:8521   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8527:8946   */\n    tag_128:\n        /* \"#utility.yul\":8693:8697   */\n      0x00\n        /* \"#utility.yul\":8731:8733   */\n      0x20\n        /* \"#utility.yul\":8720:8729   */\n      dup3\n        /* \"#utility.yul\":8716:8734   */\n      add\n        /* \"#utility.yul\":8708:8734   */\n      swap1\n      pop\n        /* \"#utility.yul\":8780:8789   */\n      dup2\n        /* \"#utility.yul\":8774:8778   */\n      dup2\n        /* \"#utility.yul\":8770:8790   */\n      sub\n        /* \"#utility.yul\":8766:8767   */\n      0x00\n        /* \"#utility.yul\":8755:8764   */\n      dup4\n        /* \"#utility.yul\":8751:8768   */\n      add\n        /* \"#utility.yul\":8744:8791   */\n      mstore\n        /* \"#utility.yul\":8808:8939   */\n      tag_229\n        /* \"#utility.yul\":8934:8938   */\n      dup2\n        /* \"#utility.yul\":8808:8939   */\n      tag_156\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":8800:8939   */\n      swap1\n      pop\n        /* \"#utility.yul\":8527:8946   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220d5fde4f8259773a1249370c2c44107aca0c1f39482533437846f60ff410f96ef64736f6c63430008090033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_772": {
									"entryPoint": null,
									"id": 772,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_disableInitializers_281": {
									"entryPoint": 36,
									"id": 281,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 325,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 405,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 360,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": 420,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 229,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 392,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a": {
									"entryPoint": 246,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1638:6",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "103:73:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "120:3:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "125:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "113:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "113:19:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "113:19:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "141:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "160:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "165:4:6",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "156:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "156:14:6"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "141:11:6"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "75:3:6",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "80:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "91:11:6",
														"type": ""
													}
												],
												"src": "7:169:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "288:120:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "318:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "306:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "306:14:6"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "322:34:6",
																		"type": "",
																		"value": "Initializable: contract is initi"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "299:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "299:58:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "299:58:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "378:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "386:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "374:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "374:15:6"
																	},
																	{
																		"hexValue": "616c697a696e67",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "391:9:6",
																		"type": "",
																		"value": "alizing"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "367:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "367:34:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "367:34:6"
														}
													]
												},
												"name": "store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "280:6:6",
														"type": ""
													}
												],
												"src": "182:226:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "560:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "570:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "636:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "641:2:6",
																		"type": "",
																		"value": "39"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "577:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "577:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "570:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "742:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																	"nodeType": "YulIdentifier",
																	"src": "653:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "653:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "653:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "755:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "766:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "771:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "762:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "762:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "755:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "548:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "556:3:6",
														"type": ""
													}
												],
												"src": "414:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "957:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "967:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "979:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "990:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "975:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "975:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "967:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1014:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1025:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1010:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1010:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "1033:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1039:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1029:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1029:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1003:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1003:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1003:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1059:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "1193:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1067:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1067:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1059:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "937:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "952:4:6",
														"type": ""
													}
												],
												"src": "786:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1254:43:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1264:27:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1279:5:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1286:4:6",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1275:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1275:16:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1264:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1236:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1246:7:6",
														"type": ""
													}
												],
												"src": "1211:86:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1364:51:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1381:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1402:5:6"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nodeType": "YulIdentifier",
																			"src": "1386:15:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1386:22:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1374:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1374:35:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1374:35:6"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1352:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1359:3:6",
														"type": ""
													}
												],
												"src": "1303:112:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1515:120:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1525:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1537:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1548:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1533:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1533:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1525:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1601:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1614:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1625:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1610:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1610:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1561:39:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1561:67:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1561:67:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1487:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1499:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1510:4:6",
														"type": ""
													}
												],
												"src": "1421:214:6"
											}
										]
									},
									"contents": "{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is initi\")\n\n        mstore(add(memPtr, 32), \"alizing\")\n\n    }\n\n    function abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061001f61002460201b60201c565b6101bf565b600060019054906101000a900460ff1615610074576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161006b90610168565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1610156100e35760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff6040516100da91906101a4565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006101526027836100e5565b915061015d826100f6565b604082019050919050565b6000602082019050818103600083015261018181610145565b9050919050565b600060ff82169050919050565b61019e81610188565b82525050565b60006020820190506101b96000830184610195565b92915050565b610c2a80620001cf6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638129fc1c1161005b5780638129fc1c146100b45780638456cb59146100be5780638da5cb5b146100c8578063f2fde38b146100e65761007d565b80633f4ba83a146100825780635c975abb1461008c578063715018a6146100aa575b600080fd5b61008a610102565b005b610094610114565b6040516100a191906107a7565b60405180910390f35b6100b261012b565b005b6100bc61013f565b005b6100c6610285565b005b6100d0610297565b6040516100dd9190610803565b60405180910390f35b61010060048036038101906100fb919061084f565b6102c1565b005b61010a610345565b6101126103c3565b565b6000603360009054906101000a900460ff16905090565b610133610345565b61013d6000610426565b565b60008060019054906101000a900460ff161590508080156101705750600160008054906101000a900460ff1660ff16105b8061019d575061017f306104ec565b15801561019c5750600160008054906101000a900460ff1660ff16145b5b6101dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d3906108ff565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610219576001600060016101000a81548160ff0219169083151502179055505b61022161050f565b610229610568565b80156102825760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516102799190610971565b60405180910390a15b50565b61028d610345565b6102956105c1565b565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102c9610345565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610339576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610330906109fe565b60405180910390fd5b61034281610426565b50565b61034d610624565b73ffffffffffffffffffffffffffffffffffffffff1661036b610297565b73ffffffffffffffffffffffffffffffffffffffff16146103c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b890610a6a565b60405180910390fd5b565b6103cb61062c565b6000603360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61040f610624565b60405161041c9190610803565b60405180910390a1565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610afc565b60405180910390fd5b610566610675565b565b600060019054906101000a900460ff166105b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ae90610afc565b60405180910390fd5b6105bf6106e1565b565b6105c9610742565b6001603360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861060d610624565b60405161061a9190610803565b60405180910390a1565b600033905090565b610634610114565b610673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066a90610b68565b60405180910390fd5b565b600060019054906101000a900460ff166106c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bb90610afc565b60405180910390fd5b6000603360006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072790610afc565b60405180910390fd5b61074061073b610624565b610426565b565b61074a610114565b1561078a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078190610bd4565b60405180910390fd5b565b60008115159050919050565b6107a18161078c565b82525050565b60006020820190506107bc6000830184610798565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107ed826107c2565b9050919050565b6107fd816107e2565b82525050565b600060208201905061081860008301846107f4565b92915050565b600080fd5b61082c816107e2565b811461083757600080fd5b50565b60008135905061084981610823565b92915050565b6000602082840312156108655761086461081e565b5b60006108738482850161083a565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006108e9602e8361087c565b91506108f48261088d565b604082019050919050565b60006020820190508181036000830152610918816108dc565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061095b6109566109518461091f565b610936565b610929565b9050919050565b61096b81610940565b82525050565b60006020820190506109866000830184610962565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006109e860268361087c565b91506109f38261098c565b604082019050919050565b60006020820190508181036000830152610a17816109db565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610a5460208361087c565b9150610a5f82610a1e565b602082019050919050565b60006020820190508181036000830152610a8381610a47565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000610ae6602b8361087c565b9150610af182610a8a565b604082019050919050565b60006020820190508181036000830152610b1581610ad9565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000610b5260148361087c565b9150610b5d82610b1c565b602082019050919050565b60006020820190508181036000830152610b8181610b45565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000610bbe60108361087c565b9150610bc982610b88565b602082019050919050565b60006020820190508181036000830152610bed81610bb1565b905091905056fea2646970667358221220d5fde4f8259773a1249370c2c44107aca0c1f39482533437846f60ff410f96ef64736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F PUSH2 0x24 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x1BF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x74 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B SWAP1 PUSH2 0x168 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP1 AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT ISZERO PUSH2 0xE3 JUMPI PUSH1 0xFF PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH2 0xDA SWAP2 SWAP1 PUSH2 0x1A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C697A696E6700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x152 PUSH1 0x27 DUP4 PUSH2 0xE5 JUMP JUMPDEST SWAP2 POP PUSH2 0x15D DUP3 PUSH2 0xF6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x181 DUP2 PUSH2 0x145 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19E DUP2 PUSH2 0x188 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x195 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC2A DUP1 PUSH3 0x1CF PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8129FC1C GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0xBE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE6 JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xAA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x102 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x94 PUSH2 0x114 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA1 SWAP2 SWAP1 PUSH2 0x7A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB2 PUSH2 0x12B JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBC PUSH2 0x13F JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC6 PUSH2 0x285 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD0 PUSH2 0x297 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDD SWAP2 SWAP1 PUSH2 0x803 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x100 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x84F JUMP JUMPDEST PUSH2 0x2C1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x10A PUSH2 0x345 JUMP JUMPDEST PUSH2 0x112 PUSH2 0x3C3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x133 PUSH2 0x345 JUMP JUMPDEST PUSH2 0x13D PUSH1 0x0 PUSH2 0x426 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x170 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x19D JUMPI POP PUSH2 0x17F ADDRESS PUSH2 0x4EC JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x19C JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x1DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D3 SWAP1 PUSH2 0x8FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x219 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x221 PUSH2 0x50F JUMP JUMPDEST PUSH2 0x229 PUSH2 0x568 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x282 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x279 SWAP2 SWAP1 PUSH2 0x971 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x28D PUSH2 0x345 JUMP JUMPDEST PUSH2 0x295 PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2C9 PUSH2 0x345 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x339 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x330 SWAP1 PUSH2 0x9FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x342 DUP2 PUSH2 0x426 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x34D PUSH2 0x624 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x36B PUSH2 0x297 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B8 SWAP1 PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x3CB PUSH2 0x62C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x40F PUSH2 0x624 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x41C SWAP2 SWAP1 PUSH2 0x803 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x65 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x555 SWAP1 PUSH2 0xAFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x566 PUSH2 0x675 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x5B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AE SWAP1 PUSH2 0xAFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5BF PUSH2 0x6E1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x5C9 PUSH2 0x742 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x60D PUSH2 0x624 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x61A SWAP2 SWAP1 PUSH2 0x803 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x634 PUSH2 0x114 JUMP JUMPDEST PUSH2 0x673 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66A SWAP1 PUSH2 0xB68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x6C4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6BB SWAP1 PUSH2 0xAFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x730 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x727 SWAP1 PUSH2 0xAFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x740 PUSH2 0x73B PUSH2 0x624 JUMP JUMPDEST PUSH2 0x426 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x74A PUSH2 0x114 JUMP JUMPDEST ISZERO PUSH2 0x78A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x781 SWAP1 PUSH2 0xBD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7A1 DUP2 PUSH2 0x78C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x7BC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x798 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7ED DUP3 PUSH2 0x7C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7FD DUP2 PUSH2 0x7E2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x818 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x7F4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x82C DUP2 PUSH2 0x7E2 JUMP JUMPDEST DUP2 EQ PUSH2 0x837 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x849 DUP2 PUSH2 0x823 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x865 JUMPI PUSH2 0x864 PUSH2 0x81E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x873 DUP5 DUP3 DUP6 ADD PUSH2 0x83A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E9 PUSH1 0x2E DUP4 PUSH2 0x87C JUMP JUMPDEST SWAP2 POP PUSH2 0x8F4 DUP3 PUSH2 0x88D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x918 DUP2 PUSH2 0x8DC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x95B PUSH2 0x956 PUSH2 0x951 DUP5 PUSH2 0x91F JUMP JUMPDEST PUSH2 0x936 JUMP JUMPDEST PUSH2 0x929 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x96B DUP2 PUSH2 0x940 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x986 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x962 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9E8 PUSH1 0x26 DUP4 PUSH2 0x87C JUMP JUMPDEST SWAP2 POP PUSH2 0x9F3 DUP3 PUSH2 0x98C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA17 DUP2 PUSH2 0x9DB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA54 PUSH1 0x20 DUP4 PUSH2 0x87C JUMP JUMPDEST SWAP2 POP PUSH2 0xA5F DUP3 PUSH2 0xA1E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA83 DUP2 PUSH2 0xA47 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE6 PUSH1 0x2B DUP4 PUSH2 0x87C JUMP JUMPDEST SWAP2 POP PUSH2 0xAF1 DUP3 PUSH2 0xA8A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB15 DUP2 PUSH2 0xAD9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB52 PUSH1 0x14 DUP4 PUSH2 0x87C JUMP JUMPDEST SWAP2 POP PUSH2 0xB5D DUP3 PUSH2 0xB1C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB81 DUP2 PUSH2 0xB45 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBBE PUSH1 0x10 DUP4 PUSH2 0x87C JUMP JUMPDEST SWAP2 POP PUSH2 0xBC9 DUP3 PUSH2 0xB88 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xBED DUP2 PUSH2 0xBB1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 REVERT 0xE4 0xF8 0x25 SWAP8 PUSH20 0xA1249370C2C44107ACA0C1F39482533437846F60 SELFDESTRUCT COINBASE 0xF SWAP7 0xEF PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "296:447:5:-:0;;;431:55;;;;;;;;;;456:22;:20;;;:22;;:::i;:::-;296:447;;5928:279:1;5996:13;;;;;;;;;;;5995:14;5987:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;6082:15;6067:30;;:12;;;;;;;;;;:30;;;6063:138;;;6128:15;6113:12;;:30;;;;;;;;;;;;;;;;;;6162:28;6174:15;6162:28;;;;;;:::i;:::-;;;;;;;;6063:138;5928:279::o;7:169:6:-;91:11;125:6;120:3;113:19;165:4;160:3;156:14;141:29;;7:169;;;;:::o;182:226::-;322:34;318:1;310:6;306:14;299:58;391:9;386:2;378:6;374:15;367:34;182:226;:::o;414:366::-;556:3;577:67;641:2;636:3;577:67;:::i;:::-;570:74;;653:93;742:3;653:93;:::i;:::-;771:2;766:3;762:12;755:19;;414:366;;;:::o;786:419::-;952:4;990:2;979:9;975:18;967:26;;1039:9;1033:4;1029:20;1025:1;1014:9;1010:17;1003:47;1067:131;1193:4;1067:131;:::i;:::-;1059:139;;786:419;;;:::o;1211:86::-;1246:7;1286:4;1279:5;1275:16;1264:27;;1211:86;;;:::o;1303:112::-;1386:22;1402:5;1386:22;:::i;:::-;1381:3;1374:35;1303:112;;:::o;1421:214::-;1510:4;1548:2;1537:9;1533:18;1525:26;;1561:67;1625:1;1614:9;1610:17;1601:6;1561:67;:::i;:::-;1421:214;;;;:::o;296:447:5:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@__Ownable_init_26": {
									"entryPoint": 1384,
									"id": 26,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__Ownable_init_unchained_37": {
									"entryPoint": 1761,
									"id": 37,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__Pausable_init_331": {
									"entryPoint": 1295,
									"id": 331,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__Pausable_init_unchained_341": {
									"entryPoint": 1653,
									"id": 341,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkOwner_68": {
									"entryPoint": 837,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_738": {
									"entryPoint": 1572,
									"id": 738,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_pause_405": {
									"entryPoint": 1473,
									"id": 405,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requireNotPaused_378": {
									"entryPoint": 1858,
									"id": 378,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requirePaused_389": {
									"entryPoint": 1580,
									"id": 389,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_transferOwnership_125": {
									"entryPoint": 1062,
									"id": 125,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_unpause_421": {
									"entryPoint": 963,
									"id": 421,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@initialize_784": {
									"entryPoint": 319,
									"id": 784,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isContract_445": {
									"entryPoint": 1260,
									"id": 445,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_54": {
									"entryPoint": 663,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@pause_793": {
									"entryPoint": 645,
									"id": 793,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@paused_366": {
									"entryPoint": 276,
									"id": 366,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_82": {
									"entryPoint": 299,
									"id": 82,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_105": {
									"entryPoint": 705,
									"id": 105,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@unpause_802": {
									"entryPoint": 258,
									"id": 802,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 2106,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2127,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 2036,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 1944,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack": {
									"entryPoint": 2402,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2885,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2523,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2993,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2268,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2631,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2777,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 2051,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 1959,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
									"entryPoint": 2417,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2920,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2558,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3028,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2303,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2666,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2812,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 2172,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 2018,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 1932,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_rational_1_by_1": {
									"entryPoint": 2335,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 1986,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 2345,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_rational_1_by_1_to_t_uint8": {
									"entryPoint": 2368,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 2358,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 2078,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a": {
									"entryPoint": 2844,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
									"entryPoint": 2444,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a": {
									"entryPoint": 2952,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759": {
									"entryPoint": 2189,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
									"entryPoint": 2590,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b": {
									"entryPoint": 2698,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 2083,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:8949:6",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "49:48:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "59:32:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "84:5:6"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "77:6:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "77:13:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "70:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "70:21:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "59:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "31:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "41:7:6",
														"type": ""
													}
												],
												"src": "7:90:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "162:50:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "179:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "199:5:6"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "184:14:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "184:21:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "172:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "172:34:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "172:34:6"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "150:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "157:3:6",
														"type": ""
													}
												],
												"src": "103:109:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "310:118:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "320:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "332:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "343:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "328:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "328:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "320:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "394:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "407:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "418:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "403:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "403:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "356:37:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "356:65:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "356:65:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "282:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "294:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "305:4:6",
														"type": ""
													}
												],
												"src": "218:210:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "479:81:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "489:65:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "504:5:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "511:42:6",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "500:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "500:54:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "489:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "461:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "471:7:6",
														"type": ""
													}
												],
												"src": "434:126:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:51:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "621:35:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "650:5:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "632:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "632:24:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "621:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "593:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "603:7:6",
														"type": ""
													}
												],
												"src": "566:96:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "733:53:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "750:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "773:5:6"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "755:17:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "755:24:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "743:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "743:37:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "743:37:6"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "721:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "728:3:6",
														"type": ""
													}
												],
												"src": "668:118:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "890:124:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "900:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "912:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "923:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "908:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "908:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "900:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "980:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "993:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1004:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "989:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "989:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "936:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "936:71:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "936:71:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "862:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "874:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "885:4:6",
														"type": ""
													}
												],
												"src": "792:222:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1060:35:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1070:19:6",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1086:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1080:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1080:9:6"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1070:6:6"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1053:6:6",
														"type": ""
													}
												],
												"src": "1020:75:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1190:28:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1207:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1210:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1200:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1200:12:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1200:12:6"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "1101:117:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1313:28:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1330:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1333:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1323:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1323:12:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1323:12:6"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "1224:117:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1390:79:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1447:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1456:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1459:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1449:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1449:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1449:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1413:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1438:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "1420:17:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1420:24:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1410:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1410:35:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1403:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1403:43:6"
															},
															"nodeType": "YulIf",
															"src": "1400:63:6"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1383:5:6",
														"type": ""
													}
												],
												"src": "1347:122:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1527:87:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1537:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1559:6:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1546:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1546:20:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1537:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1602:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1575:26:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1575:33:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1575:33:6"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1505:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1513:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1521:5:6",
														"type": ""
													}
												],
												"src": "1475:139:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1686:263:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1732:83:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1734:77:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1734:79:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1734:79:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1707:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1716:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1703:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1703:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1728:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1699:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1699:32:6"
															},
															"nodeType": "YulIf",
															"src": "1696:119:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "1825:117:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1840:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1854:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1844:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1869:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1904:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1915:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1900:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1900:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1924:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1879:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1879:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1869:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1656:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1667:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1679:6:6",
														"type": ""
													}
												],
												"src": "1620:329:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2051:73:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2068:3:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2073:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2061:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2061:19:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2061:19:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2089:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2108:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2113:4:6",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2104:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2104:14:6"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "2089:11:6"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2023:3:6",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2028:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "2039:11:6",
														"type": ""
													}
												],
												"src": "1955:169:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2236:127:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "2258:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2266:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2254:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2254:14:6"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2270:34:6",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2247:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2247:58:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2247:58:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "2326:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2334:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2322:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2322:15:6"
																	},
																	{
																		"hexValue": "647920696e697469616c697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2339:16:6",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2315:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2315:41:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2315:41:6"
														}
													]
												},
												"name": "store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "2228:6:6",
														"type": ""
													}
												],
												"src": "2130:233:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2515:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2525:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2591:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2596:2:6",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2532:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2532:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "2525:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2697:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																	"nodeType": "YulIdentifier",
																	"src": "2608:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2608:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2608:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2710:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2721:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2726:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2717:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2717:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2710:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2503:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2511:3:6",
														"type": ""
													}
												],
												"src": "2369:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2912:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2922:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2934:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2945:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2930:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2930:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2922:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2969:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2980:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2965:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2965:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "2988:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2994:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2984:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2984:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2958:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2958:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2958:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3014:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "3148:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3022:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3022:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3014:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2892:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2907:4:6",
														"type": ""
													}
												],
												"src": "2741:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3219:32:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3229:16:6",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3240:5:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3229:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_rational_1_by_1",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3201:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3211:7:6",
														"type": ""
													}
												],
												"src": "3166:85:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3300:43:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3310:27:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3325:5:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3332:4:6",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3321:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3321:16:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3310:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3282:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3292:7:6",
														"type": ""
													}
												],
												"src": "3257:86:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3381:28:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3391:12:6",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3398:5:6"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "3391:3:6"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3367:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "3377:3:6",
														"type": ""
													}
												],
												"src": "3349:60:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3481:88:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3491:72:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3555:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_rational_1_by_1",
																					"nodeType": "YulIdentifier",
																					"src": "3529:25:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3529:32:6"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "3520:8:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3520:42:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nodeType": "YulIdentifier",
																	"src": "3504:15:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3504:59:6"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "3491:9:6"
																}
															]
														}
													]
												},
												"name": "convert_t_rational_1_by_1_to_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3461:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "3471:9:6",
														"type": ""
													}
												],
												"src": "3415:154:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3646:72:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3663:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3705:5:6"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_rational_1_by_1_to_t_uint8",
																			"nodeType": "YulIdentifier",
																			"src": "3668:36:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3668:43:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3656:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3656:56:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3656:56:6"
														}
													]
												},
												"name": "abi_encode_t_rational_1_by_1_to_t_uint8_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3634:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3641:3:6",
														"type": ""
													}
												],
												"src": "3575:143:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3828:130:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3838:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3850:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3861:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3846:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3846:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3838:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3924:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3937:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3948:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3933:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3933:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_rational_1_by_1_to_t_uint8_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3874:49:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3874:77:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3874:77:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3800:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3812:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3823:4:6",
														"type": ""
													}
												],
												"src": "3724:234:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4070:119:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4092:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4100:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4088:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4088:14:6"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4104:34:6",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4081:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4081:58:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4081:58:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4160:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4168:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4156:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4156:15:6"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4173:8:6",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4149:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4149:33:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4149:33:6"
														}
													]
												},
												"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "4062:6:6",
														"type": ""
													}
												],
												"src": "3964:225:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4341:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4351:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4417:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4422:2:6",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4358:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4358:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4351:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4523:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																	"nodeType": "YulIdentifier",
																	"src": "4434:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4434:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4434:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4536:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4547:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4552:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4543:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4543:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4536:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4329:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4337:3:6",
														"type": ""
													}
												],
												"src": "4195:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4738:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4748:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4760:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4771:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4756:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4756:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4748:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4795:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4806:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4791:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4791:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "4814:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4820:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4810:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4810:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4784:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4784:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4784:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4840:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "4974:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4848:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4848:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4840:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4718:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4733:4:6",
														"type": ""
													}
												],
												"src": "4567:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5098:76:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "5120:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5128:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5116:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5116:14:6"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5132:34:6",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5109:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5109:58:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5109:58:6"
														}
													]
												},
												"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "5090:6:6",
														"type": ""
													}
												],
												"src": "4992:182:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5326:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5336:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5402:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5407:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5343:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5343:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5336:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5508:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																	"nodeType": "YulIdentifier",
																	"src": "5419:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5419:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5419:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5521:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5532:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5537:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5528:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5528:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5521:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5314:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5322:3:6",
														"type": ""
													}
												],
												"src": "5180:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5723:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5733:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5745:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5756:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5741:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5741:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5733:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5780:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5791:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5776:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5776:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "5799:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5805:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5795:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5795:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5769:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5769:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5769:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5825:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "5959:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5833:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5833:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5825:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5703:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5718:4:6",
														"type": ""
													}
												],
												"src": "5552:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6083:124:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6105:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6113:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6101:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6101:14:6"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6117:34:6",
																		"type": "",
																		"value": "Initializable: contract is not i"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6094:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6094:58:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6094:58:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6173:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6181:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6169:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6169:15:6"
																	},
																	{
																		"hexValue": "6e697469616c697a696e67",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6186:13:6",
																		"type": "",
																		"value": "nitializing"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6162:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6162:38:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6162:38:6"
														}
													]
												},
												"name": "store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "6075:6:6",
														"type": ""
													}
												],
												"src": "5977:230:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6359:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6369:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6435:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6440:2:6",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6376:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6376:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6369:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6541:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																	"nodeType": "YulIdentifier",
																	"src": "6452:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6452:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6452:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6554:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6565:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6570:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6561:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6561:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6554:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6347:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6355:3:6",
														"type": ""
													}
												],
												"src": "6213:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6756:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6766:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6778:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6789:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6774:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6774:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6766:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6813:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6824:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6809:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6809:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6832:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6838:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6828:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6828:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6802:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6802:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6802:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6858:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "6992:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6866:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6866:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6858:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6736:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6751:4:6",
														"type": ""
													}
												],
												"src": "6585:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7116:64:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7138:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7146:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7134:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7134:14:6"
																	},
																	{
																		"hexValue": "5061757361626c653a206e6f7420706175736564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7150:22:6",
																		"type": "",
																		"value": "Pausable: not paused"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7127:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7127:46:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7127:46:6"
														}
													]
												},
												"name": "store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7108:6:6",
														"type": ""
													}
												],
												"src": "7010:170:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7332:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7342:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7408:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7413:2:6",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7349:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7349:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7342:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7514:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																	"nodeType": "YulIdentifier",
																	"src": "7425:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7425:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7425:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7527:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7538:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7543:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7534:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7534:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7527:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7320:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7328:3:6",
														"type": ""
													}
												],
												"src": "7186:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7729:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7739:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7751:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7762:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7747:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7747:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7739:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7786:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7797:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7782:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7782:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7805:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7811:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7801:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7801:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7775:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7775:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7775:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7831:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7965:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7839:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7839:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7831:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7709:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7724:4:6",
														"type": ""
													}
												],
												"src": "7558:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8089:60:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8111:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8119:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8107:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8107:14:6"
																	},
																	{
																		"hexValue": "5061757361626c653a20706175736564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8123:18:6",
																		"type": "",
																		"value": "Pausable: paused"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8100:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8100:42:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8100:42:6"
														}
													]
												},
												"name": "store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "8081:6:6",
														"type": ""
													}
												],
												"src": "7983:166:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8301:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8311:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8377:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8382:2:6",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8318:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8318:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8311:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8483:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																	"nodeType": "YulIdentifier",
																	"src": "8394:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8394:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8394:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8496:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8507:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8512:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8503:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8503:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8496:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8289:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8297:3:6",
														"type": ""
													}
												],
												"src": "8155:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8698:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8708:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8720:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8731:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8716:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8716:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8708:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8755:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8766:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8751:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8751:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8774:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8780:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8770:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8770:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8744:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8744:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8744:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8800:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8934:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8808:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "8808:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8800:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8678:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8693:4:6",
														"type": ""
													}
												],
												"src": "8527:419:6"
											}
										]
									},
									"contents": "{\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: not paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061007d5760003560e01c80638129fc1c1161005b5780638129fc1c146100b45780638456cb59146100be5780638da5cb5b146100c8578063f2fde38b146100e65761007d565b80633f4ba83a146100825780635c975abb1461008c578063715018a6146100aa575b600080fd5b61008a610102565b005b610094610114565b6040516100a191906107a7565b60405180910390f35b6100b261012b565b005b6100bc61013f565b005b6100c6610285565b005b6100d0610297565b6040516100dd9190610803565b60405180910390f35b61010060048036038101906100fb919061084f565b6102c1565b005b61010a610345565b6101126103c3565b565b6000603360009054906101000a900460ff16905090565b610133610345565b61013d6000610426565b565b60008060019054906101000a900460ff161590508080156101705750600160008054906101000a900460ff1660ff16105b8061019d575061017f306104ec565b15801561019c5750600160008054906101000a900460ff1660ff16145b5b6101dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d3906108ff565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610219576001600060016101000a81548160ff0219169083151502179055505b61022161050f565b610229610568565b80156102825760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516102799190610971565b60405180910390a15b50565b61028d610345565b6102956105c1565b565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102c9610345565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610339576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610330906109fe565b60405180910390fd5b61034281610426565b50565b61034d610624565b73ffffffffffffffffffffffffffffffffffffffff1661036b610297565b73ffffffffffffffffffffffffffffffffffffffff16146103c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b890610a6a565b60405180910390fd5b565b6103cb61062c565b6000603360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61040f610624565b60405161041c9190610803565b60405180910390a1565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610afc565b60405180910390fd5b610566610675565b565b600060019054906101000a900460ff166105b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ae90610afc565b60405180910390fd5b6105bf6106e1565b565b6105c9610742565b6001603360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861060d610624565b60405161061a9190610803565b60405180910390a1565b600033905090565b610634610114565b610673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066a90610b68565b60405180910390fd5b565b600060019054906101000a900460ff166106c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bb90610afc565b60405180910390fd5b6000603360006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072790610afc565b60405180910390fd5b61074061073b610624565b610426565b565b61074a610114565b1561078a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078190610bd4565b60405180910390fd5b565b60008115159050919050565b6107a18161078c565b82525050565b60006020820190506107bc6000830184610798565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107ed826107c2565b9050919050565b6107fd816107e2565b82525050565b600060208201905061081860008301846107f4565b92915050565b600080fd5b61082c816107e2565b811461083757600080fd5b50565b60008135905061084981610823565b92915050565b6000602082840312156108655761086461081e565b5b60006108738482850161083a565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006108e9602e8361087c565b91506108f48261088d565b604082019050919050565b60006020820190508181036000830152610918816108dc565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061095b6109566109518461091f565b610936565b610929565b9050919050565b61096b81610940565b82525050565b60006020820190506109866000830184610962565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006109e860268361087c565b91506109f38261098c565b604082019050919050565b60006020820190508181036000830152610a17816109db565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610a5460208361087c565b9150610a5f82610a1e565b602082019050919050565b60006020820190508181036000830152610a8381610a47565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000610ae6602b8361087c565b9150610af182610a8a565b604082019050919050565b60006020820190508181036000830152610b1581610ad9565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000610b5260148361087c565b9150610b5d82610b1c565b602082019050919050565b60006020820190508181036000830152610b8181610b45565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000610bbe60108361087c565b9150610bc982610b88565b602082019050919050565b60006020820190508181036000830152610bed81610bb1565b905091905056fea2646970667358221220d5fde4f8259773a1249370c2c44107aca0c1f39482533437846f60ff410f96ef64736f6c63430008090033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8129FC1C GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0xBE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE6 JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xAA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x102 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x94 PUSH2 0x114 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA1 SWAP2 SWAP1 PUSH2 0x7A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB2 PUSH2 0x12B JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBC PUSH2 0x13F JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC6 PUSH2 0x285 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD0 PUSH2 0x297 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDD SWAP2 SWAP1 PUSH2 0x803 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x100 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x84F JUMP JUMPDEST PUSH2 0x2C1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x10A PUSH2 0x345 JUMP JUMPDEST PUSH2 0x112 PUSH2 0x3C3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x133 PUSH2 0x345 JUMP JUMPDEST PUSH2 0x13D PUSH1 0x0 PUSH2 0x426 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x170 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x19D JUMPI POP PUSH2 0x17F ADDRESS PUSH2 0x4EC JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x19C JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x1DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D3 SWAP1 PUSH2 0x8FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x219 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x221 PUSH2 0x50F JUMP JUMPDEST PUSH2 0x229 PUSH2 0x568 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x282 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x279 SWAP2 SWAP1 PUSH2 0x971 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x28D PUSH2 0x345 JUMP JUMPDEST PUSH2 0x295 PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2C9 PUSH2 0x345 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x339 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x330 SWAP1 PUSH2 0x9FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x342 DUP2 PUSH2 0x426 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x34D PUSH2 0x624 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x36B PUSH2 0x297 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B8 SWAP1 PUSH2 0xA6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x3CB PUSH2 0x62C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x40F PUSH2 0x624 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x41C SWAP2 SWAP1 PUSH2 0x803 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x65 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x65 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x555 SWAP1 PUSH2 0xAFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x566 PUSH2 0x675 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x5B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AE SWAP1 PUSH2 0xAFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5BF PUSH2 0x6E1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x5C9 PUSH2 0x742 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x60D PUSH2 0x624 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x61A SWAP2 SWAP1 PUSH2 0x803 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x634 PUSH2 0x114 JUMP JUMPDEST PUSH2 0x673 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66A SWAP1 PUSH2 0xB68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x6C4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6BB SWAP1 PUSH2 0xAFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x730 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x727 SWAP1 PUSH2 0xAFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x740 PUSH2 0x73B PUSH2 0x624 JUMP JUMPDEST PUSH2 0x426 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x74A PUSH2 0x114 JUMP JUMPDEST ISZERO PUSH2 0x78A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x781 SWAP1 PUSH2 0xBD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7A1 DUP2 PUSH2 0x78C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x7BC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x798 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7ED DUP3 PUSH2 0x7C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7FD DUP2 PUSH2 0x7E2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x818 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x7F4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x82C DUP2 PUSH2 0x7E2 JUMP JUMPDEST DUP2 EQ PUSH2 0x837 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x849 DUP2 PUSH2 0x823 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x865 JUMPI PUSH2 0x864 PUSH2 0x81E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x873 DUP5 DUP3 DUP6 ADD PUSH2 0x83A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E9 PUSH1 0x2E DUP4 PUSH2 0x87C JUMP JUMPDEST SWAP2 POP PUSH2 0x8F4 DUP3 PUSH2 0x88D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x918 DUP2 PUSH2 0x8DC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x95B PUSH2 0x956 PUSH2 0x951 DUP5 PUSH2 0x91F JUMP JUMPDEST PUSH2 0x936 JUMP JUMPDEST PUSH2 0x929 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x96B DUP2 PUSH2 0x940 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x986 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x962 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9E8 PUSH1 0x26 DUP4 PUSH2 0x87C JUMP JUMPDEST SWAP2 POP PUSH2 0x9F3 DUP3 PUSH2 0x98C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA17 DUP2 PUSH2 0x9DB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA54 PUSH1 0x20 DUP4 PUSH2 0x87C JUMP JUMPDEST SWAP2 POP PUSH2 0xA5F DUP3 PUSH2 0xA1E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA83 DUP2 PUSH2 0xA47 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE6 PUSH1 0x2B DUP4 PUSH2 0x87C JUMP JUMPDEST SWAP2 POP PUSH2 0xAF1 DUP3 PUSH2 0xA8A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB15 DUP2 PUSH2 0xAD9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB52 PUSH1 0x14 DUP4 PUSH2 0x87C JUMP JUMPDEST SWAP2 POP PUSH2 0xB5D DUP3 PUSH2 0xB1C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB81 DUP2 PUSH2 0xB45 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBBE PUSH1 0x10 DUP4 PUSH2 0x87C JUMP JUMPDEST SWAP2 POP PUSH2 0xBC9 DUP3 PUSH2 0xB88 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xBED DUP2 PUSH2 0xBB1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 REVERT 0xE4 0xF8 0x25 SWAP8 PUSH20 0xA1249370C2C44107ACA0C1F39482533437846F60 SELFDESTRUCT COINBASE 0xF SWAP7 0xEF PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
							"sourceMap": "296:447:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;675:65;;;:::i;:::-;;1858:84:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2071:101:0;;;:::i;:::-;;494:104:5;;;:::i;:::-;;606:61;;;:::i;:::-;;1441:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2321:198;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;675:65:5;1334:13:0;:11;:13::i;:::-;722:10:5::1;:8;:10::i;:::-;675:65::o:0;1858:84:2:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;2071:101:0:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;494:104:5:-;3268:19:1;3291:13;;;;;;;;;;;3290:14;3268:36;;3336:14;:34;;;;;3369:1;3354:12;;;;;;;;;;:16;;;3336:34;3335:108;;;;3377:44;3415:4;3377:29;:44::i;:::-;3376:45;:66;;;;;3441:1;3425:12;;;;;;;;;;:17;;;3376:66;3335:108;3314:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3540:1;3525:12;;:16;;;;;;;;;;;;;;;;;;3555:14;3551:65;;;3601:4;3585:13;;:20;;;;;;;;;;;;;;;;;;3551:65;546:17:5::1;:15;:17::i;:::-;574:16;:14;:16::i;:::-;3640:14:1::0;3636:99;;;3686:5;3670:13;;:21;;;;;;;;;;;;;;;;;;3710:14;3722:1;3710:14;;;;;;:::i;:::-;;;;;;;;3636:99;3258:483;494:104:5:o;606:61::-;1334:13:0;:11;:13::i;:::-;651:8:5::1;:6;:8::i;:::-;606:61::o:0;1441:85:0:-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;2321:198::-;1334:13;:11;:13::i;:::-;2429:1:::1;2409:22;;:8;:22;;;;2401:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2484:28;2503:8;2484:18;:28::i;:::-;2321:198:::0;:::o;1599:130::-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;2676:117:2:-;1729:16;:14;:16::i;:::-;2744:5:::1;2734:7;;:15;;;;;;;;;;;;;;;;;;2764:22;2773:12;:10;:12::i;:::-;2764:22;;;;;;:::i;:::-;;;;;;;;2676:117::o:0;2673:187:0:-;2746:16;2765:6;;;;;;;;;;;2746:25;;2790:8;2781:6;;:17;;;;;;;;;;;;;;;;;;2844:8;2813:40;;2834:8;2813:40;;;;;;;;;;;;2736:124;2673:187;:::o;1186:320:3:-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;1063:97:2:-;5363:13:1;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:2::1;:25;:27::i;:::-;1063:97::o:0;1003:95:0:-;5363:13:1;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1065:26:0::1;:24;:26::i;:::-;1003:95::o:0;2429:115:2:-;1482:19;:17;:19::i;:::-;2498:4:::1;2488:7;;:14;;;;;;;;;;;;;;;;;;2517:20;2524:12;:10;:12::i;:::-;2517:20;;;;;;:::i;:::-;;;;;;;;2429:115::o:0;850:96:4:-;903:7;929:10;922:17;;850:96;:::o;2188:106:2:-;2254:8;:6;:8::i;:::-;2246:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;2188:106::o;1166:95::-;5363:13:1;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:2::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1104:111:0:-;5363:13:1;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1176:32:0::1;1195:12;:10;:12::i;:::-;1176:18;:32::i;:::-;1104:111::o:0;2010:106:2:-;2080:8;:6;:8::i;:::-;2079:9;2071:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2010:106::o;7:90:6:-;41:7;84:5;77:13;70:21;59:32;;7:90;;;:::o;103:109::-;184:21;199:5;184:21;:::i;:::-;179:3;172:34;103:109;;:::o;218:210::-;305:4;343:2;332:9;328:18;320:26;;356:65;418:1;407:9;403:17;394:6;356:65;:::i;:::-;218:210;;;;:::o;434:126::-;471:7;511:42;504:5;500:54;489:65;;434:126;;;:::o;566:96::-;603:7;632:24;650:5;632:24;:::i;:::-;621:35;;566:96;;;:::o;668:118::-;755:24;773:5;755:24;:::i;:::-;750:3;743:37;668:118;;:::o;792:222::-;885:4;923:2;912:9;908:18;900:26;;936:71;1004:1;993:9;989:17;980:6;936:71;:::i;:::-;792:222;;;;:::o;1101:117::-;1210:1;1207;1200:12;1347:122;1420:24;1438:5;1420:24;:::i;:::-;1413:5;1410:35;1400:63;;1459:1;1456;1449:12;1400:63;1347:122;:::o;1475:139::-;1521:5;1559:6;1546:20;1537:29;;1575:33;1602:5;1575:33;:::i;:::-;1475:139;;;;:::o;1620:329::-;1679:6;1728:2;1716:9;1707:7;1703:23;1699:32;1696:119;;;1734:79;;:::i;:::-;1696:119;1854:1;1879:53;1924:7;1915:6;1904:9;1900:22;1879:53;:::i;:::-;1869:63;;1825:117;1620:329;;;;:::o;1955:169::-;2039:11;2073:6;2068:3;2061:19;2113:4;2108:3;2104:14;2089:29;;1955:169;;;;:::o;2130:233::-;2270:34;2266:1;2258:6;2254:14;2247:58;2339:16;2334:2;2326:6;2322:15;2315:41;2130:233;:::o;2369:366::-;2511:3;2532:67;2596:2;2591:3;2532:67;:::i;:::-;2525:74;;2608:93;2697:3;2608:93;:::i;:::-;2726:2;2721:3;2717:12;2710:19;;2369:366;;;:::o;2741:419::-;2907:4;2945:2;2934:9;2930:18;2922:26;;2994:9;2988:4;2984:20;2980:1;2969:9;2965:17;2958:47;3022:131;3148:4;3022:131;:::i;:::-;3014:139;;2741:419;;;:::o;3166:85::-;3211:7;3240:5;3229:16;;3166:85;;;:::o;3257:86::-;3292:7;3332:4;3325:5;3321:16;3310:27;;3257:86;;;:::o;3349:60::-;3377:3;3398:5;3391:12;;3349:60;;;:::o;3415:154::-;3471:9;3504:59;3520:42;3529:32;3555:5;3529:32;:::i;:::-;3520:42;:::i;:::-;3504:59;:::i;:::-;3491:72;;3415:154;;;:::o;3575:143::-;3668:43;3705:5;3668:43;:::i;:::-;3663:3;3656:56;3575:143;;:::o;3724:234::-;3823:4;3861:2;3850:9;3846:18;3838:26;;3874:77;3948:1;3937:9;3933:17;3924:6;3874:77;:::i;:::-;3724:234;;;;:::o;3964:225::-;4104:34;4100:1;4092:6;4088:14;4081:58;4173:8;4168:2;4160:6;4156:15;4149:33;3964:225;:::o;4195:366::-;4337:3;4358:67;4422:2;4417:3;4358:67;:::i;:::-;4351:74;;4434:93;4523:3;4434:93;:::i;:::-;4552:2;4547:3;4543:12;4536:19;;4195:366;;;:::o;4567:419::-;4733:4;4771:2;4760:9;4756:18;4748:26;;4820:9;4814:4;4810:20;4806:1;4795:9;4791:17;4784:47;4848:131;4974:4;4848:131;:::i;:::-;4840:139;;4567:419;;;:::o;4992:182::-;5132:34;5128:1;5120:6;5116:14;5109:58;4992:182;:::o;5180:366::-;5322:3;5343:67;5407:2;5402:3;5343:67;:::i;:::-;5336:74;;5419:93;5508:3;5419:93;:::i;:::-;5537:2;5532:3;5528:12;5521:19;;5180:366;;;:::o;5552:419::-;5718:4;5756:2;5745:9;5741:18;5733:26;;5805:9;5799:4;5795:20;5791:1;5780:9;5776:17;5769:47;5833:131;5959:4;5833:131;:::i;:::-;5825:139;;5552:419;;;:::o;5977:230::-;6117:34;6113:1;6105:6;6101:14;6094:58;6186:13;6181:2;6173:6;6169:15;6162:38;5977:230;:::o;6213:366::-;6355:3;6376:67;6440:2;6435:3;6376:67;:::i;:::-;6369:74;;6452:93;6541:3;6452:93;:::i;:::-;6570:2;6565:3;6561:12;6554:19;;6213:366;;;:::o;6585:419::-;6751:4;6789:2;6778:9;6774:18;6766:26;;6838:9;6832:4;6828:20;6824:1;6813:9;6809:17;6802:47;6866:131;6992:4;6866:131;:::i;:::-;6858:139;;6585:419;;;:::o;7010:170::-;7150:22;7146:1;7138:6;7134:14;7127:46;7010:170;:::o;7186:366::-;7328:3;7349:67;7413:2;7408:3;7349:67;:::i;:::-;7342:74;;7425:93;7514:3;7425:93;:::i;:::-;7543:2;7538:3;7534:12;7527:19;;7186:366;;;:::o;7558:419::-;7724:4;7762:2;7751:9;7747:18;7739:26;;7811:9;7805:4;7801:20;7797:1;7786:9;7782:17;7775:47;7839:131;7965:4;7839:131;:::i;:::-;7831:139;;7558:419;;;:::o;7983:166::-;8123:18;8119:1;8111:6;8107:14;8100:42;7983:166;:::o;8155:366::-;8297:3;8318:67;8382:2;8377:3;8318:67;:::i;:::-;8311:74;;8394:93;8483:3;8394:93;:::i;:::-;8512:2;8507:3;8503:12;8496:19;;8155:366;;;:::o;8527:419::-;8693:4;8731:2;8720:9;8716:18;8708:26;;8780:9;8774:4;8770:20;8766:1;8755:9;8751:17;8744:47;8808:131;8934:4;8808:131;:::i;:::-;8800:139;;8527:419;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "622800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"initialize()": "144848",
								"owner()": "2566",
								"pause()": "infinite",
								"paused()": "2502",
								"renounceOwnership()": "30443",
								"transferOwnership(address)": "30813",
								"unpause()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 296,
									"end": 743,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 296,
									"end": 743,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 296,
									"end": 743,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 431,
									"end": 486,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 431,
									"end": 486,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 431,
									"end": 486,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 431,
									"end": 486,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 431,
									"end": 486,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 431,
									"end": 486,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 431,
									"end": 486,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 431,
									"end": 486,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 431,
									"end": 486,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 431,
									"end": 486,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 431,
									"end": 486,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 456,
									"end": 478,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 456,
									"end": 476,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "5"
								},
								{
									"begin": 456,
									"end": 476,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 456,
									"end": 476,
									"name": "SHL",
									"source": 5
								},
								{
									"begin": 456,
									"end": 478,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 456,
									"end": 478,
									"name": "SHR",
									"source": 5
								},
								{
									"begin": 456,
									"end": 478,
									"name": "JUMP",
									"source": 5,
									"value": "[in]"
								},
								{
									"begin": 456,
									"end": 478,
									"name": "tag",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 456,
									"end": 478,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 296,
									"end": 743,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "6"
								},
								{
									"begin": 296,
									"end": 743,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 5928,
									"end": 6207,
									"name": "tag",
									"source": 1,
									"value": "5"
								},
								{
									"begin": 5928,
									"end": 6207,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 5995,
									"end": 6009,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "PUSH",
									"source": 1,
									"value": "8C379A000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "9"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "tag",
									"source": 1,
									"value": "9"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "tag",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 6082,
									"end": 6097,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 6067,
									"end": 6097,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 6067,
									"end": 6097,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 6067,
									"end": 6097,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 6067,
									"end": 6097,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 6067,
									"end": 6097,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 6063,
									"end": 6201,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 6063,
									"end": 6201,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 6063,
									"end": 6201,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 6128,
									"end": 6143,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 6113,
									"end": 6125,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 6113,
									"end": 6125,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "PUSH",
									"source": 1,
									"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
								},
								{
									"begin": 6174,
									"end": 6189,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "13"
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "tag",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "LOG1",
									"source": 1
								},
								{
									"begin": 6063,
									"end": 6201,
									"name": "tag",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 6063,
									"end": 6201,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5928,
									"end": 6207,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 7,
									"end": 176,
									"name": "tag",
									"source": 6,
									"value": "14"
								},
								{
									"begin": 7,
									"end": 176,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 91,
									"end": 102,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 125,
									"end": 131,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 120,
									"end": 123,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 113,
									"end": 132,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 165,
									"end": 169,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 160,
									"end": 163,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 156,
									"end": 170,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 141,
									"end": 170,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 141,
									"end": 170,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 7,
									"end": 176,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 7,
									"end": 176,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 7,
									"end": 176,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 7,
									"end": 176,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 7,
									"end": 176,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 182,
									"end": 408,
									"name": "tag",
									"source": 6,
									"value": "15"
								},
								{
									"begin": 182,
									"end": 408,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 322,
									"end": 356,
									"name": "PUSH",
									"source": 6,
									"value": "496E697469616C697A61626C653A20636F6E747261637420697320696E697469"
								},
								{
									"begin": 318,
									"end": 319,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 310,
									"end": 316,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 306,
									"end": 320,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 299,
									"end": 357,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 391,
									"end": 400,
									"name": "PUSH",
									"source": 6,
									"value": "616C697A696E6700000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 386,
									"end": 388,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 378,
									"end": 384,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 374,
									"end": 389,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 367,
									"end": 401,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 182,
									"end": 408,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 182,
									"end": 408,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 414,
									"end": 780,
									"name": "tag",
									"source": 6,
									"value": "16"
								},
								{
									"begin": 414,
									"end": 780,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 556,
									"end": 559,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 577,
									"end": 644,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "23"
								},
								{
									"begin": 641,
									"end": 643,
									"name": "PUSH",
									"source": 6,
									"value": "27"
								},
								{
									"begin": 636,
									"end": 639,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 577,
									"end": 644,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "14"
								},
								{
									"begin": 577,
									"end": 644,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 577,
									"end": 644,
									"name": "tag",
									"source": 6,
									"value": "23"
								},
								{
									"begin": 577,
									"end": 644,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 570,
									"end": 644,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 570,
									"end": 644,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 653,
									"end": 746,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 742,
									"end": 745,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 653,
									"end": 746,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "15"
								},
								{
									"begin": 653,
									"end": 746,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 653,
									"end": 746,
									"name": "tag",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 653,
									"end": 746,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 771,
									"end": 773,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 766,
									"end": 769,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 762,
									"end": 774,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 755,
									"end": 774,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 755,
									"end": 774,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 414,
									"end": 780,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 414,
									"end": 780,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 414,
									"end": 780,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 414,
									"end": 780,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 786,
									"end": 1205,
									"name": "tag",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 786,
									"end": 1205,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 952,
									"end": 956,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 990,
									"end": 992,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 979,
									"end": 988,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 975,
									"end": 993,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 967,
									"end": 993,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 967,
									"end": 993,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1039,
									"end": 1048,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1033,
									"end": 1037,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1029,
									"end": 1049,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1025,
									"end": 1026,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1014,
									"end": 1023,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1010,
									"end": 1027,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1003,
									"end": 1050,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1067,
									"end": 1198,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "26"
								},
								{
									"begin": 1193,
									"end": 1197,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1067,
									"end": 1198,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "16"
								},
								{
									"begin": 1067,
									"end": 1198,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 1067,
									"end": 1198,
									"name": "tag",
									"source": 6,
									"value": "26"
								},
								{
									"begin": 1067,
									"end": 1198,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1059,
									"end": 1198,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1059,
									"end": 1198,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 786,
									"end": 1205,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 786,
									"end": 1205,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 786,
									"end": 1205,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 786,
									"end": 1205,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 1211,
									"end": 1297,
									"name": "tag",
									"source": 6,
									"value": "17"
								},
								{
									"begin": 1211,
									"end": 1297,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1246,
									"end": 1253,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1286,
									"end": 1290,
									"name": "PUSH",
									"source": 6,
									"value": "FF"
								},
								{
									"begin": 1279,
									"end": 1284,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1275,
									"end": 1291,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1264,
									"end": 1291,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1264,
									"end": 1291,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1211,
									"end": 1297,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1211,
									"end": 1297,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1211,
									"end": 1297,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1211,
									"end": 1297,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 1303,
									"end": 1415,
									"name": "tag",
									"source": 6,
									"value": "18"
								},
								{
									"begin": 1303,
									"end": 1415,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1386,
									"end": 1408,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "29"
								},
								{
									"begin": 1402,
									"end": 1407,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1386,
									"end": 1408,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "17"
								},
								{
									"begin": 1386,
									"end": 1408,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 1386,
									"end": 1408,
									"name": "tag",
									"source": 6,
									"value": "29"
								},
								{
									"begin": 1386,
									"end": 1408,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1381,
									"end": 1384,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1374,
									"end": 1409,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1303,
									"end": 1415,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1303,
									"end": 1415,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1303,
									"end": 1415,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 1421,
									"end": 1635,
									"name": "tag",
									"source": 6,
									"value": "13"
								},
								{
									"begin": 1421,
									"end": 1635,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1510,
									"end": 1514,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1548,
									"end": 1550,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1537,
									"end": 1546,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1533,
									"end": 1551,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1525,
									"end": 1551,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1525,
									"end": 1551,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1561,
									"end": 1628,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "31"
								},
								{
									"begin": 1625,
									"end": 1626,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1614,
									"end": 1623,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1610,
									"end": 1627,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1601,
									"end": 1607,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 1561,
									"end": 1628,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "18"
								},
								{
									"begin": 1561,
									"end": 1628,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 1561,
									"end": 1628,
									"name": "tag",
									"source": 6,
									"value": "31"
								},
								{
									"begin": 1561,
									"end": 1628,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1421,
									"end": 1635,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1421,
									"end": 1635,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1421,
									"end": 1635,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1421,
									"end": 1635,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1421,
									"end": 1635,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 296,
									"end": 743,
									"name": "tag",
									"source": 5,
									"value": "6"
								},
								{
									"begin": 296,
									"end": 743,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 296,
									"end": 743,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 296,
									"end": 743,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 296,
									"end": 743,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 296,
									"end": 743,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 296,
									"end": 743,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 296,
									"end": 743,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 296,
									"end": 743,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d5fde4f8259773a1249370c2c44107aca0c1f39482533437846f60ff410f96ef64736f6c63430008090033",
									".code": [
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "tag",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "8129FC1C"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "8129FC1C"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "8456CB59"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "8DA5CB5B"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "F2FDE38B"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "3F4BA83A"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "5C975ABB"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "715018A6"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "tag",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 296,
											"end": 743,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 296,
											"end": 743,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 675,
											"end": 740,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 675,
											"end": 740,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 675,
											"end": 740,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 675,
											"end": 740,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 675,
											"end": 740,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 675,
											"end": 740,
											"name": "tag",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 675,
											"end": 740,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 675,
											"end": 740,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 494,
											"end": 598,
											"name": "tag",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 494,
											"end": 598,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 494,
											"end": 598,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 494,
											"end": 598,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 494,
											"end": 598,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 494,
											"end": 598,
											"name": "tag",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 494,
											"end": 598,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 494,
											"end": 598,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 606,
											"end": 667,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 606,
											"end": 667,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 606,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 606,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 606,
											"end": 667,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 606,
											"end": 667,
											"name": "tag",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 606,
											"end": 667,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 606,
											"end": 667,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 675,
											"end": 740,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 675,
											"end": 740,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 722,
											"end": 732,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 722,
											"end": 730,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 722,
											"end": 732,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 722,
											"end": 732,
											"name": "tag",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 722,
											"end": 732,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 675,
											"end": 740,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1905,
											"end": 1909,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1921,
											"end": 1935,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1921,
											"end": 1935,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2135,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 2162,
											"end": 2163,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2135,
											"end": 2153,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 2135,
											"end": 2165,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2135,
											"end": 2165,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 2135,
											"end": 2165,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 494,
											"end": 598,
											"name": "tag",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 494,
											"end": 598,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3268,
											"end": 3287,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3290,
											"end": 3304,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3304,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3304,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3336,
											"end": 3350,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3369,
											"end": 3370,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3354,
											"end": 3370,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3354,
											"end": 3370,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3354,
											"end": 3370,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "tag",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3335,
											"end": 3443,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3335,
											"end": 3443,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 3335,
											"end": 3443,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3335,
											"end": 3443,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3377,
											"end": 3421,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 3415,
											"end": 3419,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 3377,
											"end": 3406,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 3377,
											"end": 3421,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3377,
											"end": 3421,
											"name": "tag",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 3377,
											"end": 3421,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3376,
											"end": 3421,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3376,
											"end": 3442,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3376,
											"end": 3442,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3376,
											"end": 3442,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 3376,
											"end": 3442,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3376,
											"end": 3442,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3441,
											"end": 3442,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3425,
											"end": 3442,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3425,
											"end": 3442,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3425,
											"end": 3442,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 3376,
											"end": 3442,
											"name": "tag",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 3376,
											"end": 3442,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3335,
											"end": 3443,
											"name": "tag",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 3335,
											"end": 3443,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "tag",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3540,
											"end": 3541,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3525,
											"end": 3537,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3525,
											"end": 3537,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3555,
											"end": 3569,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3551,
											"end": 3616,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3551,
											"end": 3616,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 3551,
											"end": 3616,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3601,
											"end": 3605,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3585,
											"end": 3598,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3585,
											"end": 3598,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3551,
											"end": 3616,
											"name": "tag",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 3551,
											"end": 3616,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 546,
											"end": 563,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 546,
											"end": 561,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 546,
											"end": 563,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 546,
											"end": 563,
											"name": "tag",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 546,
											"end": 563,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 574,
											"end": 590,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 574,
											"end": 588,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "57"
										},
										{
											"begin": 574,
											"end": 590,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 574,
											"end": 590,
											"name": "tag",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 574,
											"end": 590,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3640,
											"end": 3654,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3636,
											"end": 3735,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3636,
											"end": 3735,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 3636,
											"end": 3735,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3686,
											"end": 3691,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3670,
											"end": 3683,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3683,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "PUSH",
											"source": 1,
											"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
										},
										{
											"begin": 3722,
											"end": 3723,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "tag",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 3636,
											"end": 3735,
											"name": "tag",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 3636,
											"end": 3735,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3258,
											"end": 3741,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 494,
											"end": 598,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 606,
											"end": 667,
											"name": "tag",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 606,
											"end": 667,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 651,
											"end": 659,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 657,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 651,
											"end": 659,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 651,
											"end": 659,
											"name": "tag",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 659,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 606,
											"end": 667,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1487,
											"end": 1494,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1519,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2429,
											"end": 2430,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2409,
											"end": 2431,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2409,
											"end": 2431,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2409,
											"end": 2417,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2409,
											"end": 2431,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2409,
											"end": 2431,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2409,
											"end": 2431,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2409,
											"end": 2431,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2484,
											"end": 2512,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 2503,
											"end": 2511,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2484,
											"end": 2502,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 2484,
											"end": 2512,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2484,
											"end": 2512,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 2484,
											"end": 2512,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1599,
											"end": 1729,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1599,
											"end": 1729,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1673,
											"end": 1685,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 1673,
											"end": 1683,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1673,
											"end": 1685,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1673,
											"end": 1685,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 1673,
											"end": 1685,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1662,
											"end": 1685,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1662,
											"end": 1685,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1662,
											"end": 1669,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1662,
											"end": 1667,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1662,
											"end": 1669,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1662,
											"end": 1669,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1662,
											"end": 1669,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1662,
											"end": 1685,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1662,
											"end": 1685,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1662,
											"end": 1685,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "tag",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1599,
											"end": 1729,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2676,
											"end": 2793,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 2676,
											"end": 2793,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1729,
											"end": 1745,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 1729,
											"end": 1743,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 1729,
											"end": 1745,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1729,
											"end": 1745,
											"name": "tag",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 1729,
											"end": 1745,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2744,
											"end": 2749,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2734,
											"end": 2741,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 2734,
											"end": 2741,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "PUSH",
											"source": 2,
											"value": "5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA"
										},
										{
											"begin": 2773,
											"end": 2785,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 2773,
											"end": 2783,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2773,
											"end": 2785,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2773,
											"end": 2785,
											"name": "tag",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 2773,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "LOG1",
											"source": 2
										},
										{
											"begin": 2676,
											"end": 2793,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2673,
											"end": 2860,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 2673,
											"end": 2860,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 2762,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 2771,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 2771,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2790,
											"end": 2798,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2787,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2781,
											"end": 2787,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2844,
											"end": 2852,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2834,
											"end": 2842,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2736,
											"end": 2860,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2673,
											"end": 2860,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2673,
											"end": 2860,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "tag",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1246,
											"end": 1250,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1498,
											"end": 1499,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1476,
											"end": 1483,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1469,
											"end": 1499,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1469,
											"end": 1499,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1063,
											"end": 1160,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 1063,
											"end": 1160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "90"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 1,
											"value": "90"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1126,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 1126,
											"end": 1153,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1126,
											"end": 1153,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 1126,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1063,
											"end": 1160,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1003,
											"end": 1098,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 1003,
											"end": 1098,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "97"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 1,
											"value": "97"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1065,
											"end": 1091,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1065,
											"end": 1089,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1065,
											"end": 1091,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1065,
											"end": 1091,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1065,
											"end": 1091,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1003,
											"end": 1098,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2429,
											"end": 2544,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2429,
											"end": 2544,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 1482,
											"end": 1499,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "tag",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2498,
											"end": 2502,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2488,
											"end": 2495,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 2488,
											"end": 2495,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "PUSH",
											"source": 2,
											"value": "62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258"
										},
										{
											"begin": 2524,
											"end": 2536,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 2524,
											"end": 2534,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2524,
											"end": 2536,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2524,
											"end": 2536,
											"name": "tag",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 2524,
											"end": 2536,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "tag",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2517,
											"end": 2537,
											"name": "LOG1",
											"source": 2
										},
										{
											"begin": 2429,
											"end": 2544,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 850,
											"end": 946,
											"name": "tag",
											"source": 4,
											"value": "76"
										},
										{
											"begin": 850,
											"end": 946,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 903,
											"end": 910,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 922,
											"end": 939,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 922,
											"end": 939,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 850,
											"end": 946,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 850,
											"end": 946,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2188,
											"end": 2294,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 2188,
											"end": 2294,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2254,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 2254,
											"end": 2260,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 2254,
											"end": 2262,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2254,
											"end": 2262,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 2254,
											"end": 2262,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2188,
											"end": 2294,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1166,
											"end": 1261,
											"name": "tag",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 1166,
											"end": 1261,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1249,
											"end": 1254,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1239,
											"end": 1246,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 1239,
											"end": 1246,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1166,
											"end": 1261,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1104,
											"end": 1215,
											"name": "tag",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 1104,
											"end": 1215,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1176,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 1195,
											"end": 1207,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 1195,
											"end": 1205,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1195,
											"end": 1207,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1195,
											"end": 1207,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 1195,
											"end": 1207,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1176,
											"end": 1194,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1176,
											"end": 1208,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1176,
											"end": 1208,
											"name": "tag",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 1176,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1104,
											"end": 1215,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2010,
											"end": 2116,
											"name": "tag",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 2010,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2080,
											"end": 2088,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 2080,
											"end": 2086,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 2080,
											"end": 2088,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2080,
											"end": 2088,
											"name": "tag",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 2080,
											"end": 2088,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2079,
											"end": 2088,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "tag",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2010,
											"end": 2116,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 97,
											"name": "tag",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 7,
											"end": 97,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 41,
											"end": 48,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 84,
											"end": 89,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 77,
											"end": 90,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 70,
											"end": 91,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 59,
											"end": 91,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 59,
											"end": 91,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7,
											"end": 97,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7,
											"end": 97,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7,
											"end": 97,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7,
											"end": 97,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 103,
											"end": 212,
											"name": "tag",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 103,
											"end": 212,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 184,
											"end": 205,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 199,
											"end": 204,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 184,
											"end": 205,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 184,
											"end": 205,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 184,
											"end": 205,
											"name": "tag",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 184,
											"end": 205,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 179,
											"end": 182,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 172,
											"end": 206,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 103,
											"end": 212,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 103,
											"end": 212,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 103,
											"end": 212,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 218,
											"end": 428,
											"name": "tag",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 218,
											"end": 428,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 305,
											"end": 309,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 343,
											"end": 345,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 332,
											"end": 341,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 328,
											"end": 346,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 320,
											"end": 346,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 320,
											"end": 346,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 356,
											"end": 421,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 418,
											"end": 419,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 407,
											"end": 416,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 403,
											"end": 420,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 394,
											"end": 400,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 356,
											"end": 421,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 356,
											"end": 421,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 356,
											"end": 421,
											"name": "tag",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 356,
											"end": 421,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 218,
											"end": 428,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 218,
											"end": 428,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 218,
											"end": 428,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 218,
											"end": 428,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 218,
											"end": 428,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 434,
											"end": 560,
											"name": "tag",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 434,
											"end": 560,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 471,
											"end": 478,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 511,
											"end": 553,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 504,
											"end": 509,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 500,
											"end": 554,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 489,
											"end": 554,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 489,
											"end": 554,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 434,
											"end": 560,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 434,
											"end": 560,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 434,
											"end": 560,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 434,
											"end": 560,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 566,
											"end": 662,
											"name": "tag",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 566,
											"end": 662,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 603,
											"end": 610,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 632,
											"end": 656,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 650,
											"end": 655,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 632,
											"end": 656,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 632,
											"end": 656,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 632,
											"end": 656,
											"name": "tag",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 632,
											"end": 656,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 621,
											"end": 656,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 621,
											"end": 656,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 566,
											"end": 662,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 566,
											"end": 662,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 566,
											"end": 662,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 566,
											"end": 662,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 668,
											"end": 786,
											"name": "tag",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 668,
											"end": 786,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 755,
											"end": 779,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 773,
											"end": 778,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 755,
											"end": 779,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 755,
											"end": 779,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 755,
											"end": 779,
											"name": "tag",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 755,
											"end": 779,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 750,
											"end": 753,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 743,
											"end": 780,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 668,
											"end": 786,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 668,
											"end": 786,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 668,
											"end": 786,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 792,
											"end": 1014,
											"name": "tag",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 792,
											"end": 1014,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 885,
											"end": 889,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 923,
											"end": 925,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 921,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 908,
											"end": 926,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 900,
											"end": 926,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 900,
											"end": 926,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 936,
											"end": 1007,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 1004,
											"end": 1005,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 993,
											"end": 1002,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 989,
											"end": 1006,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 980,
											"end": 986,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 936,
											"end": 1007,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 936,
											"end": 1007,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 936,
											"end": 1007,
											"name": "tag",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 936,
											"end": 1007,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 792,
											"end": 1014,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 792,
											"end": 1014,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 792,
											"end": 1014,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 792,
											"end": 1014,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 792,
											"end": 1014,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1101,
											"end": 1218,
											"name": "tag",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 1101,
											"end": 1218,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1210,
											"end": 1211,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1207,
											"end": 1208,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1200,
											"end": 1212,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1347,
											"end": 1469,
											"name": "tag",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 1347,
											"end": 1469,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1420,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "174"
										},
										{
											"begin": 1438,
											"end": 1443,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1420,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 1420,
											"end": 1444,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1420,
											"end": 1444,
											"name": "tag",
											"source": 6,
											"value": "174"
										},
										{
											"begin": 1420,
											"end": 1444,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1413,
											"end": 1418,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1410,
											"end": 1445,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1400,
											"end": 1463,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "175"
										},
										{
											"begin": 1400,
											"end": 1463,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1459,
											"end": 1460,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1456,
											"end": 1457,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1449,
											"end": 1461,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1400,
											"end": 1463,
											"name": "tag",
											"source": 6,
											"value": "175"
										},
										{
											"begin": 1400,
											"end": 1463,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1347,
											"end": 1469,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1347,
											"end": 1469,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1475,
											"end": 1614,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 1475,
											"end": 1614,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1521,
											"end": 1526,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1559,
											"end": 1565,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1546,
											"end": 1566,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 1537,
											"end": 1566,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1537,
											"end": 1566,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1575,
											"end": 1608,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 1602,
											"end": 1607,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1575,
											"end": 1608,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 1575,
											"end": 1608,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1575,
											"end": 1608,
											"name": "tag",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 1575,
											"end": 1608,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1475,
											"end": 1614,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1475,
											"end": 1614,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1475,
											"end": 1614,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1475,
											"end": 1614,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1475,
											"end": 1614,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1620,
											"end": 1949,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 1620,
											"end": 1949,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1679,
											"end": 1685,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1728,
											"end": 1730,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1716,
											"end": 1725,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1707,
											"end": 1714,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1703,
											"end": 1726,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1699,
											"end": 1731,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 1696,
											"end": 1815,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1696,
											"end": 1815,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 1696,
											"end": 1815,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1734,
											"end": 1813,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 1734,
											"end": 1813,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 1734,
											"end": 1813,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1734,
											"end": 1813,
											"name": "tag",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 1734,
											"end": 1813,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1696,
											"end": 1815,
											"name": "tag",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 1696,
											"end": 1815,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1855,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1879,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "181"
										},
										{
											"begin": 1924,
											"end": 1931,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1915,
											"end": 1921,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1904,
											"end": 1913,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1900,
											"end": 1922,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1879,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 1879,
											"end": 1932,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1879,
											"end": 1932,
											"name": "tag",
											"source": 6,
											"value": "181"
										},
										{
											"begin": 1879,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1869,
											"end": 1932,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1869,
											"end": 1932,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1825,
											"end": 1942,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1620,
											"end": 1949,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1620,
											"end": 1949,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1620,
											"end": 1949,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1620,
											"end": 1949,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1620,
											"end": 1949,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1955,
											"end": 2124,
											"name": "tag",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 1955,
											"end": 2124,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2039,
											"end": 2050,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2073,
											"end": 2079,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2068,
											"end": 2071,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2061,
											"end": 2080,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2113,
											"end": 2117,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2108,
											"end": 2111,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2104,
											"end": 2118,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2089,
											"end": 2118,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2089,
											"end": 2118,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1955,
											"end": 2124,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1955,
											"end": 2124,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1955,
											"end": 2124,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1955,
											"end": 2124,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1955,
											"end": 2124,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2130,
											"end": 2363,
											"name": "tag",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 2130,
											"end": 2363,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2270,
											"end": 2304,
											"name": "PUSH",
											"source": 6,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 2266,
											"end": 2267,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2258,
											"end": 2264,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2254,
											"end": 2268,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2247,
											"end": 2305,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2339,
											"end": 2355,
											"name": "PUSH",
											"source": 6,
											"value": "647920696E697469616C697A6564000000000000000000000000000000000000"
										},
										{
											"begin": 2334,
											"end": 2336,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2326,
											"end": 2332,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2322,
											"end": 2337,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2315,
											"end": 2356,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2130,
											"end": 2363,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2130,
											"end": 2363,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2369,
											"end": 2735,
											"name": "tag",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 2369,
											"end": 2735,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2511,
											"end": 2514,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2532,
											"end": 2599,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 2596,
											"end": 2598,
											"name": "PUSH",
											"source": 6,
											"value": "2E"
										},
										{
											"begin": 2591,
											"end": 2594,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2532,
											"end": 2599,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 2532,
											"end": 2599,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2532,
											"end": 2599,
											"name": "tag",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 2532,
											"end": 2599,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2525,
											"end": 2599,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2525,
											"end": 2599,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2608,
											"end": 2701,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 2697,
											"end": 2700,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2608,
											"end": 2701,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 2608,
											"end": 2701,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2608,
											"end": 2701,
											"name": "tag",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 2608,
											"end": 2701,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2726,
											"end": 2728,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2721,
											"end": 2724,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2717,
											"end": 2729,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2729,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2729,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2369,
											"end": 2735,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2369,
											"end": 2735,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2369,
											"end": 2735,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2369,
											"end": 2735,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2741,
											"end": 3160,
											"name": "tag",
											"source": 6,
											"value": "51"
										},
										{
											"begin": 2741,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2907,
											"end": 2911,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2945,
											"end": 2947,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2934,
											"end": 2943,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2930,
											"end": 2948,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2922,
											"end": 2948,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2922,
											"end": 2948,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2994,
											"end": 3003,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2988,
											"end": 2992,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2984,
											"end": 3004,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2980,
											"end": 2981,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2969,
											"end": 2978,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2965,
											"end": 2982,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2958,
											"end": 3005,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3022,
											"end": 3153,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "188"
										},
										{
											"begin": 3148,
											"end": 3152,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3022,
											"end": 3153,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 3022,
											"end": 3153,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3022,
											"end": 3153,
											"name": "tag",
											"source": 6,
											"value": "188"
										},
										{
											"begin": 3022,
											"end": 3153,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3014,
											"end": 3153,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3014,
											"end": 3153,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2741,
											"end": 3160,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2741,
											"end": 3160,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2741,
											"end": 3160,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2741,
											"end": 3160,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3166,
											"end": 3251,
											"name": "tag",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 3166,
											"end": 3251,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3211,
											"end": 3218,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3240,
											"end": 3245,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3229,
											"end": 3245,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3229,
											"end": 3245,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3166,
											"end": 3251,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3166,
											"end": 3251,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3166,
											"end": 3251,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3166,
											"end": 3251,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3257,
											"end": 3343,
											"name": "tag",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 3257,
											"end": 3343,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3292,
											"end": 3299,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3332,
											"end": 3336,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3325,
											"end": 3330,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3321,
											"end": 3337,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3310,
											"end": 3337,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3310,
											"end": 3337,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3257,
											"end": 3343,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3257,
											"end": 3343,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3257,
											"end": 3343,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3257,
											"end": 3343,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3349,
											"end": 3409,
											"name": "tag",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 3349,
											"end": 3409,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3377,
											"end": 3380,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3398,
											"end": 3403,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3391,
											"end": 3403,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3391,
											"end": 3403,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3349,
											"end": 3409,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3349,
											"end": 3409,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3349,
											"end": 3409,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3349,
											"end": 3409,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3415,
											"end": 3569,
											"name": "tag",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 3415,
											"end": 3569,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3471,
											"end": 3480,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3504,
											"end": 3563,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 3520,
											"end": 3562,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 3529,
											"end": 3561,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 3555,
											"end": 3560,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3529,
											"end": 3561,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 3529,
											"end": 3561,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3529,
											"end": 3561,
											"name": "tag",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 3529,
											"end": 3561,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3520,
											"end": 3562,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 3520,
											"end": 3562,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3520,
											"end": 3562,
											"name": "tag",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 3520,
											"end": 3562,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3504,
											"end": 3563,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 3504,
											"end": 3563,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3504,
											"end": 3563,
											"name": "tag",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 3504,
											"end": 3563,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3491,
											"end": 3563,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3491,
											"end": 3563,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3415,
											"end": 3569,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3415,
											"end": 3569,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3415,
											"end": 3569,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3415,
											"end": 3569,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3575,
											"end": 3718,
											"name": "tag",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 3575,
											"end": 3718,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3668,
											"end": 3711,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 3705,
											"end": 3710,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3668,
											"end": 3711,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 3668,
											"end": 3711,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3668,
											"end": 3711,
											"name": "tag",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 3668,
											"end": 3711,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3663,
											"end": 3666,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3656,
											"end": 3712,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3575,
											"end": 3718,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3575,
											"end": 3718,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3575,
											"end": 3718,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3724,
											"end": 3958,
											"name": "tag",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 3724,
											"end": 3958,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3823,
											"end": 3827,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3861,
											"end": 3863,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3850,
											"end": 3859,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3846,
											"end": 3864,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3838,
											"end": 3864,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3838,
											"end": 3864,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3874,
											"end": 3951,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 3948,
											"end": 3949,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3937,
											"end": 3946,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3933,
											"end": 3950,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3924,
											"end": 3930,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3874,
											"end": 3951,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 3874,
											"end": 3951,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3874,
											"end": 3951,
											"name": "tag",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 3874,
											"end": 3951,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3724,
											"end": 3958,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3724,
											"end": 3958,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3724,
											"end": 3958,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3724,
											"end": 3958,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3724,
											"end": 3958,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3964,
											"end": 4189,
											"name": "tag",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 3964,
											"end": 4189,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4104,
											"end": 4138,
											"name": "PUSH",
											"source": 6,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 4100,
											"end": 4101,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4092,
											"end": 4098,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4088,
											"end": 4102,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4081,
											"end": 4139,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4173,
											"end": 4181,
											"name": "PUSH",
											"source": 6,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4168,
											"end": 4170,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4160,
											"end": 4166,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4156,
											"end": 4171,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4149,
											"end": 4182,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3964,
											"end": 4189,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3964,
											"end": 4189,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4195,
											"end": 4561,
											"name": "tag",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 4195,
											"end": 4561,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4337,
											"end": 4340,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4358,
											"end": 4425,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 4422,
											"end": 4424,
											"name": "PUSH",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 4417,
											"end": 4420,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4358,
											"end": 4425,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 4358,
											"end": 4425,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4358,
											"end": 4425,
											"name": "tag",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 4358,
											"end": 4425,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4351,
											"end": 4425,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4351,
											"end": 4425,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4434,
											"end": 4527,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "203"
										},
										{
											"begin": 4523,
											"end": 4526,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4434,
											"end": 4527,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 4434,
											"end": 4527,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4434,
											"end": 4527,
											"name": "tag",
											"source": 6,
											"value": "203"
										},
										{
											"begin": 4434,
											"end": 4527,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4552,
											"end": 4554,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4547,
											"end": 4550,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4543,
											"end": 4555,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4536,
											"end": 4555,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4536,
											"end": 4555,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4195,
											"end": 4561,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4195,
											"end": 4561,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4195,
											"end": 4561,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4195,
											"end": 4561,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4567,
											"end": 4986,
											"name": "tag",
											"source": 6,
											"value": "72"
										},
										{
											"begin": 4567,
											"end": 4986,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4737,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4771,
											"end": 4773,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4760,
											"end": 4769,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4756,
											"end": 4774,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4748,
											"end": 4774,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4748,
											"end": 4774,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4820,
											"end": 4829,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4814,
											"end": 4818,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4810,
											"end": 4830,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4806,
											"end": 4807,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4795,
											"end": 4804,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4791,
											"end": 4808,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4784,
											"end": 4831,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4848,
											"end": 4979,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 4974,
											"end": 4978,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4848,
											"end": 4979,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 4848,
											"end": 4979,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4848,
											"end": 4979,
											"name": "tag",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 4848,
											"end": 4979,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4840,
											"end": 4979,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4840,
											"end": 4979,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4567,
											"end": 4986,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4567,
											"end": 4986,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4567,
											"end": 4986,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4567,
											"end": 4986,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4992,
											"end": 5174,
											"name": "tag",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 4992,
											"end": 5174,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5132,
											"end": 5166,
											"name": "PUSH",
											"source": 6,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 5128,
											"end": 5129,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5120,
											"end": 5126,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5116,
											"end": 5130,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5109,
											"end": 5167,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4992,
											"end": 5174,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4992,
											"end": 5174,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5180,
											"end": 5546,
											"name": "tag",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 5180,
											"end": 5546,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5322,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5343,
											"end": 5410,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 5407,
											"end": 5409,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5402,
											"end": 5405,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5343,
											"end": 5410,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 5343,
											"end": 5410,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5343,
											"end": 5410,
											"name": "tag",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 5343,
											"end": 5410,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5336,
											"end": 5410,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5336,
											"end": 5410,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5419,
											"end": 5512,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5508,
											"end": 5511,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5419,
											"end": 5512,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 5419,
											"end": 5512,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5419,
											"end": 5512,
											"name": "tag",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5419,
											"end": 5512,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5537,
											"end": 5539,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5532,
											"end": 5535,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5528,
											"end": 5540,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5521,
											"end": 5540,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5521,
											"end": 5540,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5180,
											"end": 5546,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5180,
											"end": 5546,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5180,
											"end": 5546,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5180,
											"end": 5546,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5552,
											"end": 5971,
											"name": "tag",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 5552,
											"end": 5971,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5718,
											"end": 5722,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5756,
											"end": 5758,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5745,
											"end": 5754,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5741,
											"end": 5759,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5733,
											"end": 5759,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5733,
											"end": 5759,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5805,
											"end": 5814,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5799,
											"end": 5803,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5795,
											"end": 5815,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5791,
											"end": 5792,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5780,
											"end": 5789,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5776,
											"end": 5793,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5769,
											"end": 5816,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5833,
											"end": 5964,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 5959,
											"end": 5963,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5833,
											"end": 5964,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 5833,
											"end": 5964,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5833,
											"end": 5964,
											"name": "tag",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 5833,
											"end": 5964,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5825,
											"end": 5964,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5825,
											"end": 5964,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5552,
											"end": 5971,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5552,
											"end": 5971,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5552,
											"end": 5971,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5552,
											"end": 5971,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5977,
											"end": 6207,
											"name": "tag",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 5977,
											"end": 6207,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6117,
											"end": 6151,
											"name": "PUSH",
											"source": 6,
											"value": "496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069"
										},
										{
											"begin": 6113,
											"end": 6114,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6105,
											"end": 6111,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6101,
											"end": 6115,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6094,
											"end": 6152,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6186,
											"end": 6199,
											"name": "PUSH",
											"source": 6,
											"value": "6E697469616C697A696E67000000000000000000000000000000000000000000"
										},
										{
											"begin": 6181,
											"end": 6183,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6173,
											"end": 6179,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6169,
											"end": 6184,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6162,
											"end": 6200,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5977,
											"end": 6207,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5977,
											"end": 6207,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6213,
											"end": 6579,
											"name": "tag",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 6213,
											"end": 6579,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6355,
											"end": 6358,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6376,
											"end": 6443,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 6440,
											"end": 6442,
											"name": "PUSH",
											"source": 6,
											"value": "2B"
										},
										{
											"begin": 6435,
											"end": 6438,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6376,
											"end": 6443,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 6376,
											"end": 6443,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6376,
											"end": 6443,
											"name": "tag",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 6376,
											"end": 6443,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6369,
											"end": 6443,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6369,
											"end": 6443,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6452,
											"end": 6545,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 6541,
											"end": 6544,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6452,
											"end": 6545,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 6452,
											"end": 6545,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6452,
											"end": 6545,
											"name": "tag",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 6452,
											"end": 6545,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6570,
											"end": 6572,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6565,
											"end": 6568,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6561,
											"end": 6573,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6554,
											"end": 6573,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6554,
											"end": 6573,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6213,
											"end": 6579,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6213,
											"end": 6579,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6213,
											"end": 6579,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6213,
											"end": 6579,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6585,
											"end": 7004,
											"name": "tag",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 6585,
											"end": 7004,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6751,
											"end": 6755,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6789,
											"end": 6791,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6778,
											"end": 6787,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6774,
											"end": 6792,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6766,
											"end": 6792,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6766,
											"end": 6792,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6838,
											"end": 6847,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6832,
											"end": 6836,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6828,
											"end": 6848,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6824,
											"end": 6825,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6813,
											"end": 6822,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6809,
											"end": 6826,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6802,
											"end": 6849,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6866,
											"end": 6997,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 6992,
											"end": 6996,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6866,
											"end": 6997,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 6866,
											"end": 6997,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6866,
											"end": 6997,
											"name": "tag",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 6866,
											"end": 6997,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6858,
											"end": 6997,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6858,
											"end": 6997,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6585,
											"end": 7004,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6585,
											"end": 7004,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6585,
											"end": 7004,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6585,
											"end": 7004,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7010,
											"end": 7180,
											"name": "tag",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 7010,
											"end": 7180,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7150,
											"end": 7172,
											"name": "PUSH",
											"source": 6,
											"value": "5061757361626C653A206E6F7420706175736564000000000000000000000000"
										},
										{
											"begin": 7146,
											"end": 7147,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7138,
											"end": 7144,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7134,
											"end": 7148,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7127,
											"end": 7173,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7010,
											"end": 7180,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7010,
											"end": 7180,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7186,
											"end": 7552,
											"name": "tag",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 7186,
											"end": 7552,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7328,
											"end": 7331,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7349,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 7413,
											"end": 7415,
											"name": "PUSH",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 7408,
											"end": 7411,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7349,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 7349,
											"end": 7416,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7349,
											"end": 7416,
											"name": "tag",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 7349,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7342,
											"end": 7416,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7342,
											"end": 7416,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7425,
											"end": 7518,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "221"
										},
										{
											"begin": 7514,
											"end": 7517,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7425,
											"end": 7518,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 7425,
											"end": 7518,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7425,
											"end": 7518,
											"name": "tag",
											"source": 6,
											"value": "221"
										},
										{
											"begin": 7425,
											"end": 7518,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7543,
											"end": 7545,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7538,
											"end": 7541,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7534,
											"end": 7546,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7527,
											"end": 7546,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7527,
											"end": 7546,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7186,
											"end": 7552,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7186,
											"end": 7552,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7186,
											"end": 7552,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7186,
											"end": 7552,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7558,
											"end": 7977,
											"name": "tag",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 7558,
											"end": 7977,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7724,
											"end": 7728,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7762,
											"end": 7764,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7751,
											"end": 7760,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7747,
											"end": 7765,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7739,
											"end": 7765,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7739,
											"end": 7765,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7811,
											"end": 7820,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7805,
											"end": 7809,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7801,
											"end": 7821,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7797,
											"end": 7798,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7786,
											"end": 7795,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7782,
											"end": 7799,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7775,
											"end": 7822,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7839,
											"end": 7970,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 7965,
											"end": 7969,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7839,
											"end": 7970,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 7839,
											"end": 7970,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7839,
											"end": 7970,
											"name": "tag",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 7839,
											"end": 7970,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7831,
											"end": 7970,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7831,
											"end": 7970,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7558,
											"end": 7977,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7558,
											"end": 7977,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7558,
											"end": 7977,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7558,
											"end": 7977,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7983,
											"end": 8149,
											"name": "tag",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 7983,
											"end": 8149,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8141,
											"name": "PUSH",
											"source": 6,
											"value": "5061757361626C653A2070617573656400000000000000000000000000000000"
										},
										{
											"begin": 8119,
											"end": 8120,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8111,
											"end": 8117,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8107,
											"end": 8121,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8100,
											"end": 8142,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7983,
											"end": 8149,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7983,
											"end": 8149,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 8155,
											"end": 8521,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 8155,
											"end": 8521,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8297,
											"end": 8300,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8318,
											"end": 8385,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 8382,
											"end": 8384,
											"name": "PUSH",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 8377,
											"end": 8380,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8318,
											"end": 8385,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 8318,
											"end": 8385,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8318,
											"end": 8385,
											"name": "tag",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 8318,
											"end": 8385,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8311,
											"end": 8385,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8311,
											"end": 8385,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8394,
											"end": 8487,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 8483,
											"end": 8486,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8394,
											"end": 8487,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 8394,
											"end": 8487,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8394,
											"end": 8487,
											"name": "tag",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 8394,
											"end": 8487,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8512,
											"end": 8514,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8507,
											"end": 8510,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8503,
											"end": 8515,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8496,
											"end": 8515,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8496,
											"end": 8515,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8155,
											"end": 8521,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8155,
											"end": 8521,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8155,
											"end": 8521,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8155,
											"end": 8521,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 8527,
											"end": 8946,
											"name": "tag",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 8527,
											"end": 8946,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8693,
											"end": 8697,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8731,
											"end": 8733,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8720,
											"end": 8729,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8716,
											"end": 8734,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8708,
											"end": 8734,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8708,
											"end": 8734,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8780,
											"end": 8789,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8774,
											"end": 8778,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8790,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8766,
											"end": 8767,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8755,
											"end": 8764,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8751,
											"end": 8768,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8744,
											"end": 8791,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8808,
											"end": 8939,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "229"
										},
										{
											"begin": 8934,
											"end": 8938,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8808,
											"end": 8939,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 8808,
											"end": 8939,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8808,
											"end": 8939,
											"name": "tag",
											"source": 6,
											"value": "229"
										},
										{
											"begin": 8808,
											"end": 8939,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8800,
											"end": 8939,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8800,
											"end": 8939,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8527,
											"end": 8946,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8527,
											"end": 8946,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8527,
											"end": 8946,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8527,
											"end": 8946,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"initialize()": "8129fc1c",
							"owner()": "8da5cb5b",
							"pause()": "8456cb59",
							"paused()": "5c975abb",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b",
							"unpause()": "3f4ba83a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Contracts/Nether.sol\":\"Nether\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a\",\"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9c7d1f5e15633ab912b74c2f57e24559e66b03232300d4b27ff0f25bc452ecad\",\"dweb:/ipfs/QmYTJkc1cntYkKQ1Tu11nBcJLakiy93Tjytc4XHELo4GmR\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"src/Contracts/Nether.sol\":{\"keccak256\":\"0x7edc52c51809ac6d2854afea807dbc4c0166ea3711806a22c2a44ac6ce460a9a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d0bf46eba3533250dcf9d067ed9370bcc8c011d0b9167b7b89fc7b88b4da142b\",\"dweb:/ipfs/QmcxkEks8WTVyv4Pjyb7B3CKLnFUQthfSCNEGNrmVT6nFm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "src/Contracts/Nether.sol:Nether",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "src/Contracts/Nether.sol:Nether",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 752,
								"contract": "src/Contracts/Nether.sol:Nether",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 321,
								"contract": "src/Contracts/Nether.sol:Nether",
								"label": "_paused",
								"offset": 0,
								"slot": "51",
								"type": "t_bool"
							},
							{
								"astId": 426,
								"contract": "src/Contracts/Nether.sol:Nether",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 10,
								"contract": "src/Contracts/Nether.sol:Nether",
								"label": "_owner",
								"offset": 0,
								"slot": "101",
								"type": "t_address"
							},
							{
								"astId": 130,
								"contract": "src/Contracts/Nether.sol:Nether",
								"label": "__gap",
								"offset": 0,
								"slot": "102",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							711
						],
						"ContextUpgradeable": [
							753
						],
						"Initializable": [
							300
						],
						"OwnableUpgradeable": [
							131
						]
					},
					"id": 132,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 132,
							"sourceUnit": 754,
							"src": "127:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 132,
							"sourceUnit": 301,
							"src": "169:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 300,
										"src": "748:13:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "748:13:0"
								},
								{
									"baseName": {
										"id": 7,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 753,
										"src": "763:18:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "763:18:0"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "213:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 131,
							"linearizedBaseContracts": [
								131,
								753,
								300
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "726:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "804:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 131,
									"src": "788:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "788:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 16,
									"name": "OwnershipTransferred",
									"nameLocation": "823:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "860:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "844:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "844:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "891:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "875:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "875:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:57:0"
									},
									"src": "817:84:0"
								},
								{
									"body": {
										"id": 25,
										"nodeType": "Block",
										"src": "1055:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 22,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 37,
														"src": "1065:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1065:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "1065:26:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "907:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 26,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 20,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 19,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "1038:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1038:16:0"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "1012:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1026:2:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1055:0:0"
									},
									"scope": 131,
									"src": "1003:95:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 36,
										"nodeType": "Block",
										"src": "1166:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 32,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 738,
																"src": "1195:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 33,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1195:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 31,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "1176:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1176:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "1176:32:0"
											}
										]
									},
									"id": 37,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 29,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 28,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "1149:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1149:16:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1113:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1137:2:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1166:0:0"
									},
									"scope": 131,
									"src": "1104:111:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 44,
										"nodeType": "Block",
										"src": "1324:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 40,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 68,
														"src": "1334:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1334:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "1334:13:0"
											},
											{
												"id": 43,
												"nodeType": "PlaceholderStatement",
												"src": "1357:1:0"
											}
										]
									},
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "1221:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 45,
									"name": "onlyOwner",
									"nameLocation": "1312:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1321:2:0"
									},
									"src": "1303:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1496:30:0",
										"statements": [
											{
												"expression": {
													"id": 51,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "1513:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 50,
												"id": 52,
												"nodeType": "Return",
												"src": "1506:13:0"
											}
										]
									},
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "1371:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1450:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1455:2:0"
									},
									"returnParameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1487:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1487:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1486:9:0"
									},
									"scope": 131,
									"src": "1441:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1644:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 59,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 54,
																	"src": "1662:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 60,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1662:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 61,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 738,
																	"src": "1673:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1673:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1662:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1687:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 58,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1654:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1654:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1654:68:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1532:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1608:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1619:2:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1644:0:0"
									},
									"scope": 131,
									"src": "1599:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 81,
										"nodeType": "Block",
										"src": "2125:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 77,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2162:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 76,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2154:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 75,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2154:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 78,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2154:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 74,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "2135:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 79,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2135:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 80,
												"nodeType": "ExpressionStatement",
												"src": "2135:30:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1735:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 82,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 72,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 71,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "2115:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2115:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2080:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2097:2:0"
									},
									"returnParameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2125:0:0"
									},
									"scope": 131,
									"src": "2071:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 104,
										"nodeType": "Block",
										"src": "2391:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 91,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 85,
																"src": "2409:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 94,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2429:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2421:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 92,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2421:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 95,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2421:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2409:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 97,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2433:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 90,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2401:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2401:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 99,
												"nodeType": "ExpressionStatement",
												"src": "2401:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 101,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 85,
															"src": "2503:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 100,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "2484:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2484:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 103,
												"nodeType": "ExpressionStatement",
												"src": "2484:28:0"
											}
										]
									},
									"documentation": {
										"id": 83,
										"nodeType": "StructuredDocumentation",
										"src": "2178:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 105,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "2381:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2381:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2330:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2356:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "2348:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2348:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2347:18:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2391:0:0"
									},
									"scope": 131,
									"src": "2321:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "2736:124:0",
										"statements": [
											{
												"assignments": [
													112
												],
												"declarations": [
													{
														"constant": false,
														"id": 112,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2754:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 124,
														"src": "2746:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 111,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2746:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 114,
												"initialValue": {
													"id": 113,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "2765:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2746:25:0"
											},
											{
												"expression": {
													"id": 117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 115,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2781:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 116,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 108,
														"src": "2790:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2781:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 118,
												"nodeType": "ExpressionStatement",
												"src": "2781:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 120,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 112,
															"src": "2834:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 121,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 108,
															"src": "2844:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 119,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2813:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2813:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 123,
												"nodeType": "EmitStatement",
												"src": "2808:45:0"
											}
										]
									},
									"documentation": {
										"id": 106,
										"nodeType": "StructuredDocumentation",
										"src": "2525:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2682:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 108,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2709:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "2701:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:18:0"
									},
									"returnParameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2736:0:0"
									},
									"scope": 131,
									"src": "2673:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 126,
										"nodeType": "StructuredDocumentation",
										"src": "2866:254:0",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 130,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "3145:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 131,
									"src": "3125:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 127,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3125:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 129,
										"length": {
											"hexValue": "3439",
											"id": 128,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3133:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "3125:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 132,
							"src": "708:2445:0",
							"usedErrors": []
						}
					],
					"src": "102:3052:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							711
						],
						"Initializable": [
							300
						]
					},
					"id": 301,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 133,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 134,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 301,
							"sourceUnit": 712,
							"src": "138:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 135,
								"nodeType": "StructuredDocumentation",
								"src": "184:2198:1",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 300,
							"linearizedBaseContracts": [
								300
							],
							"name": "Initializable",
							"nameLocation": "2401:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 136,
										"nodeType": "StructuredDocumentation",
										"src": "2421:109:1",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 138,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2549:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 300,
									"src": "2535:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 137,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2535:5:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "2568:91:1",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 141,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2677:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 300,
									"src": "2664:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 140,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2664:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 142,
										"nodeType": "StructuredDocumentation",
										"src": "2697:90:1",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"id": 146,
									"name": "Initialized",
									"nameLocation": "2798:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2816:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2810:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 143,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2810:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2809:15:1"
									},
									"src": "2792:33:1"
								},
								{
									"body": {
										"id": 201,
										"nodeType": "Block",
										"src": "3258:483:1",
										"statements": [
											{
												"assignments": [
													150
												],
												"declarations": [
													{
														"constant": false,
														"id": 150,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3273:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 201,
														"src": "3268:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 149,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3268:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 153,
												"initialValue": {
													"id": 152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3290:14:1",
													"subExpression": {
														"id": 151,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "3291:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3268:36:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 174,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 159,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 155,
																			"name": "isTopLevelCall",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 150,
																			"src": "3336:14:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 158,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 156,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 138,
																				"src": "3354:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 157,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3369:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3354:16:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3336:34:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 160,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3335:36:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 168,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "3376:45:1",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 165,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "3415:4:1",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$300",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$300",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 164,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3407:7:1",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 163,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "3407:7:1",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 166,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3407:13:1",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 161,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 711,
																						"src": "3377:18:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$711_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 162,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 445,
																					"src": "3377:29:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 167,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3377:44:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 171,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 169,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 138,
																				"src": "3425:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 170,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3441:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3425:17:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3376:66:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 173,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3375:68:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3335:108:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 175,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3457:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 154,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3314:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3314:201:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "3314:201:1"
											},
											{
												"expression": {
													"id": 180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 178,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "3525:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 179,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3540:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3525:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 181,
												"nodeType": "ExpressionStatement",
												"src": "3525:16:1"
											},
											{
												"condition": {
													"id": 182,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 150,
													"src": "3555:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 188,
												"nodeType": "IfStatement",
												"src": "3551:65:1",
												"trueBody": {
													"id": 187,
													"nodeType": "Block",
													"src": "3571:45:1",
													"statements": [
														{
															"expression": {
																"id": 185,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 183,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "3585:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 184,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3601:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3585:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 186,
															"nodeType": "ExpressionStatement",
															"src": "3585:20:1"
														}
													]
												}
											},
											{
												"id": 189,
												"nodeType": "PlaceholderStatement",
												"src": "3625:1:1"
											},
											{
												"condition": {
													"id": 190,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 150,
													"src": "3640:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 200,
												"nodeType": "IfStatement",
												"src": "3636:99:1",
												"trueBody": {
													"id": 199,
													"nodeType": "Block",
													"src": "3656:79:1",
													"statements": [
														{
															"expression": {
																"id": 193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 191,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "3670:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 192,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3686:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3670:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 194,
															"nodeType": "ExpressionStatement",
															"src": "3670:21:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3722:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 195,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 146,
																	"src": "3710:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 197,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3710:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 198,
															"nodeType": "EmitStatement",
															"src": "3705:19:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 147,
										"nodeType": "StructuredDocumentation",
										"src": "2831:399:1",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."
									},
									"id": 202,
									"name": "initializer",
									"nameLocation": "3244:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3255:2:1"
									},
									"src": "3235:506:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 234,
										"nodeType": "Block",
										"src": "4852:255:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 213,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 209,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "4870:14:1",
																"subExpression": {
																	"id": 208,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "4871:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 212,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 210,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "4888:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 211,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 205,
																	"src": "4903:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4888:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4870:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 214,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4912:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 207,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4862:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4862:99:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 216,
												"nodeType": "ExpressionStatement",
												"src": "4862:99:1"
											},
											{
												"expression": {
													"id": 219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 217,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "4971:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 218,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 205,
														"src": "4986:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4971:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 220,
												"nodeType": "ExpressionStatement",
												"src": "4971:22:1"
											},
											{
												"expression": {
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 221,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "5003:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 222,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5019:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "5003:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 224,
												"nodeType": "ExpressionStatement",
												"src": "5003:20:1"
											},
											{
												"id": 225,
												"nodeType": "PlaceholderStatement",
												"src": "5033:1:1"
											},
											{
												"expression": {
													"id": 228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 226,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "5044:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 227,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5060:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "5044:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 229,
												"nodeType": "ExpressionStatement",
												"src": "5044:21:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 231,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 205,
															"src": "5092:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 230,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "5080:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
															"typeString": "function (uint8)"
														}
													},
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5080:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 233,
												"nodeType": "EmitStatement",
												"src": "5075:25:1"
											}
										]
									},
									"documentation": {
										"id": 203,
										"nodeType": "StructuredDocumentation",
										"src": "3747:1062:1",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 235,
									"name": "reinitializer",
									"nameLocation": "4823:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4843:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4837:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 204,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4837:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4836:15:1"
									},
									"src": "4814:293:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 244,
										"nodeType": "Block",
										"src": "5345:97:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 239,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 141,
															"src": "5363:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 240,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5378:45:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 238,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5355:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5355:69:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 242,
												"nodeType": "ExpressionStatement",
												"src": "5355:69:1"
											},
											{
												"id": 243,
												"nodeType": "PlaceholderStatement",
												"src": "5434:1:1"
											}
										]
									},
									"documentation": {
										"id": 236,
										"nodeType": "StructuredDocumentation",
										"src": "5113:199:1",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 245,
									"name": "onlyInitializing",
									"nameLocation": "5326:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5342:2:1"
									},
									"src": "5317:125:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 280,
										"nodeType": "Block",
										"src": "5977:230:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 251,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "5995:14:1",
															"subExpression": {
																"id": 250,
																"name": "_initializing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 141,
																"src": "5996:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67",
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6011:41:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															},
															"value": "Initializable: contract is initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															}
														],
														"id": 249,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5987:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5987:66:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 254,
												"nodeType": "ExpressionStatement",
												"src": "5987:66:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 255,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "6067:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 258,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6087:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	},
																	"typeName": {
																		"id": 257,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "6087:5:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	}
																],
																"id": 256,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "6082:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 259,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6082:11:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint8",
																"typeString": "type(uint8)"
															}
														},
														"id": 260,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "6082:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "6067:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 279,
												"nodeType": "IfStatement",
												"src": "6063:138:1",
												"trueBody": {
													"id": 278,
													"nodeType": "Block",
													"src": "6099:102:1",
													"statements": [
														{
															"expression": {
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 262,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "6113:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 265,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6133:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 264,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "6133:5:1",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 263,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "6128:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 266,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6128:11:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 267,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "6128:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "6113:30:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 269,
															"nodeType": "ExpressionStatement",
															"src": "6113:30:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 273,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "6179:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					},
																					"typeName": {
																						"id": 272,
																						"name": "uint8",
																						"nodeType": "ElementaryTypeName",
																						"src": "6179:5:1",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					}
																				],
																				"id": 271,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "6174:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 274,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6174:11:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint8",
																				"typeString": "type(uint8)"
																			}
																		},
																		"id": 275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "6174:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 270,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 146,
																	"src": "6162:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 276,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6162:28:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 277,
															"nodeType": "EmitStatement",
															"src": "6157:33:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 246,
										"nodeType": "StructuredDocumentation",
										"src": "5448:475:1",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5937:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5957:2:1"
									},
									"returnParameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5977:0:1"
									},
									"scope": 300,
									"src": "5928:279:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 289,
										"nodeType": "Block",
										"src": "6384:36:1",
										"statements": [
											{
												"expression": {
													"id": 287,
													"name": "_initialized",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 138,
													"src": "6401:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 286,
												"id": 288,
												"nodeType": "Return",
												"src": "6394:19:1"
											}
										]
									},
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "6213:102:1",
										"text": " @dev Internal function that returns the initialized version. Returns `_initialized`"
									},
									"id": 290,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "6329:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6351:2:1"
									},
									"returnParameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 290,
												"src": "6377:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 284,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6377:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6376:7:1"
									},
									"scope": 300,
									"src": "6320:100:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 298,
										"nodeType": "Block",
										"src": "6590:37:1",
										"statements": [
											{
												"expression": {
													"id": 296,
													"name": "_initializing",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 141,
													"src": "6607:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 295,
												"id": 297,
												"nodeType": "Return",
												"src": "6600:20:1"
											}
										]
									},
									"documentation": {
										"id": 291,
										"nodeType": "StructuredDocumentation",
										"src": "6426:103:1",
										"text": " @dev Internal function that returns the initialized version. Returns `_initializing`"
									},
									"id": 299,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "6543:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6558:2:1"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "6584:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 293,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6584:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6583:6:1"
									},
									"scope": 300,
									"src": "6534:93:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 301,
							"src": "2383:4246:1",
							"usedErrors": []
						}
					],
					"src": "113:6517:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							711
						],
						"ContextUpgradeable": [
							753
						],
						"Initializable": [
							300
						],
						"PausableUpgradeable": [
							427
						]
					},
					"id": 428,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 302,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 303,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 428,
							"sourceUnit": 754,
							"src": "130:41:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 304,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 428,
							"sourceUnit": 301,
							"src": "172:42:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 306,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 300,
										"src": "697:13:2"
									},
									"id": 307,
									"nodeType": "InheritanceSpecifier",
									"src": "697:13:2"
								},
								{
									"baseName": {
										"id": 308,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 753,
										"src": "712:18:2"
									},
									"id": 309,
									"nodeType": "InheritanceSpecifier",
									"src": "712:18:2"
								}
							],
							"canonicalName": "PausableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 305,
								"nodeType": "StructuredDocumentation",
								"src": "216:439:2",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 427,
							"linearizedBaseContracts": [
								427,
								753,
								300
							],
							"name": "PausableUpgradeable",
							"nameLocation": "674:19:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 310,
										"nodeType": "StructuredDocumentation",
										"src": "737:73:2",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"id": 314,
									"name": "Paused",
									"nameLocation": "821:6:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "836:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "828:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 311,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "828:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "827:17:2"
									},
									"src": "815:30:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 315,
										"nodeType": "StructuredDocumentation",
										"src": "851:70:2",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"id": 319,
									"name": "Unpaused",
									"nameLocation": "932:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "949:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "941:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "941:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:17:2"
									},
									"src": "926:32:2"
								},
								{
									"constant": false,
									"id": 321,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "977:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 427,
									"src": "964:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 320,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "964:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 330,
										"nodeType": "Block",
										"src": "1116:44:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 327,
														"name": "__Pausable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "1126:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1126:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 329,
												"nodeType": "ExpressionStatement",
												"src": "1126:27:2"
											}
										]
									},
									"documentation": {
										"id": 322,
										"nodeType": "StructuredDocumentation",
										"src": "991:67:2",
										"text": " @dev Initializes the contract in unpaused state."
									},
									"id": 331,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 325,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 324,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "1099:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "1099:16:2"
										}
									],
									"name": "__Pausable_init",
									"nameLocation": "1072:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1087:2:2"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1116:0:2"
									},
									"scope": 427,
									"src": "1063:97:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 340,
										"nodeType": "Block",
										"src": "1229:32:2",
										"statements": [
											{
												"expression": {
													"id": 338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 336,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 321,
														"src": "1239:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 337,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1249:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1239:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 339,
												"nodeType": "ExpressionStatement",
												"src": "1239:15:2"
											}
										]
									},
									"id": 341,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 334,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 333,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "1212:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "1212:16:2"
										}
									],
									"name": "__Pausable_init_unchained",
									"nameLocation": "1175:25:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1200:2:2"
									},
									"returnParameters": {
										"id": 335,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1229:0:2"
									},
									"scope": 427,
									"src": "1166:95:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 348,
										"nodeType": "Block",
										"src": "1472:47:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 344,
														"name": "_requireNotPaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 378,
														"src": "1482:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1482:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 346,
												"nodeType": "ExpressionStatement",
												"src": "1482:19:2"
											},
											{
												"id": 347,
												"nodeType": "PlaceholderStatement",
												"src": "1511:1:2"
											}
										]
									},
									"documentation": {
										"id": 342,
										"nodeType": "StructuredDocumentation",
										"src": "1267:175:2",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 349,
									"name": "whenNotPaused",
									"nameLocation": "1456:13:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1469:2:2"
									},
									"src": "1447:72:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 356,
										"nodeType": "Block",
										"src": "1719:44:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 352,
														"name": "_requirePaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 389,
														"src": "1729:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1729:16:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 354,
												"nodeType": "ExpressionStatement",
												"src": "1729:16:2"
											},
											{
												"id": 355,
												"nodeType": "PlaceholderStatement",
												"src": "1755:1:2"
											}
										]
									},
									"documentation": {
										"id": 350,
										"nodeType": "StructuredDocumentation",
										"src": "1525:167:2",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 357,
									"name": "whenPaused",
									"nameLocation": "1706:10:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1716:2:2"
									},
									"src": "1697:66:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 365,
										"nodeType": "Block",
										"src": "1911:31:2",
										"statements": [
											{
												"expression": {
													"id": 363,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 321,
													"src": "1928:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 362,
												"id": 364,
												"nodeType": "Return",
												"src": "1921:14:2"
											}
										]
									},
									"documentation": {
										"id": 358,
										"nodeType": "StructuredDocumentation",
										"src": "1769:84:2",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 366,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "1867:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1873:2:2"
									},
									"returnParameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "1905:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 360,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1905:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1904:6:2"
									},
									"scope": 427,
									"src": "1858:84:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 377,
										"nodeType": "Block",
										"src": "2061:55:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 373,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "2079:9:2",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 371,
																	"name": "paused",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 366,
																	"src": "2080:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																		"typeString": "function () view returns (bool)"
																	}
																},
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2080:8:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a20706175736564",
															"id": 374,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2090:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															},
															"value": "Pausable: paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															}
														],
														"id": 370,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2071:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2071:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 376,
												"nodeType": "ExpressionStatement",
												"src": "2071:38:2"
											}
										]
									},
									"documentation": {
										"id": 367,
										"nodeType": "StructuredDocumentation",
										"src": "1948:57:2",
										"text": " @dev Throws if the contract is paused."
									},
									"id": 378,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireNotPaused",
									"nameLocation": "2019:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2036:2:2"
									},
									"returnParameters": {
										"id": 369,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2061:0:2"
									},
									"scope": 427,
									"src": "2010:106:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 388,
										"nodeType": "Block",
										"src": "2236:58:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 383,
																"name": "paused",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "2254:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 384,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2254:8:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a206e6f7420706175736564",
															"id": 385,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2264:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															},
															"value": "Pausable: not paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															}
														],
														"id": 382,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2246:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2246:41:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 387,
												"nodeType": "ExpressionStatement",
												"src": "2246:41:2"
											}
										]
									},
									"documentation": {
										"id": 379,
										"nodeType": "StructuredDocumentation",
										"src": "2122:61:2",
										"text": " @dev Throws if the contract is not paused."
									},
									"id": 389,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requirePaused",
									"nameLocation": "2197:14:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 380,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2211:2:2"
									},
									"returnParameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2236:0:2"
									},
									"scope": 427,
									"src": "2188:106:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 404,
										"nodeType": "Block",
										"src": "2478:66:2",
										"statements": [
											{
												"expression": {
													"id": 397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 395,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 321,
														"src": "2488:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 396,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2498:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2488:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 398,
												"nodeType": "ExpressionStatement",
												"src": "2488:14:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 400,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 738,
																"src": "2524:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 401,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2524:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 399,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 314,
														"src": "2517:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 402,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2517:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 403,
												"nodeType": "EmitStatement",
												"src": "2512:25:2"
											}
										]
									},
									"documentation": {
										"id": 390,
										"nodeType": "StructuredDocumentation",
										"src": "2300:124:2",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 405,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 393,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 392,
												"name": "whenNotPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 349,
												"src": "2464:13:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2464:13:2"
										}
									],
									"name": "_pause",
									"nameLocation": "2438:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2444:2:2"
									},
									"returnParameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2478:0:2"
									},
									"scope": 427,
									"src": "2429:115:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 420,
										"nodeType": "Block",
										"src": "2724:69:2",
										"statements": [
											{
												"expression": {
													"id": 413,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 411,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 321,
														"src": "2734:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 412,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2744:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2734:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 414,
												"nodeType": "ExpressionStatement",
												"src": "2734:15:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 416,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 738,
																"src": "2773:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2773:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 415,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 319,
														"src": "2764:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2764:22:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 419,
												"nodeType": "EmitStatement",
												"src": "2759:27:2"
											}
										]
									},
									"documentation": {
										"id": 406,
										"nodeType": "StructuredDocumentation",
										"src": "2550:121:2",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 421,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 409,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 408,
												"name": "whenPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "2713:10:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2713:10:2"
										}
									],
									"name": "_unpause",
									"nameLocation": "2685:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 407,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2693:2:2"
									},
									"returnParameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2724:0:2"
									},
									"scope": 427,
									"src": "2676:117:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 422,
										"nodeType": "StructuredDocumentation",
										"src": "2799:254:2",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 426,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "3078:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 427,
									"src": "3058:25:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 423,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3058:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 425,
										"length": {
											"hexValue": "3439",
											"id": 424,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3066:2:2",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "3058:11:2",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 428,
							"src": "656:2430:2",
							"usedErrors": []
						}
					],
					"src": "105:2982:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							711
						]
					},
					"id": 712,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 429,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AddressUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 430,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:3",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 711,
							"linearizedBaseContracts": [
								711
							],
							"name": "AddressUpgradeable",
							"nameLocation": "202:18:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "1252:254:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 438,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 433,
																"src": "1476:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1476:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 440,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1476:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 441,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1498:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1476:23:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 437,
												"id": 443,
												"nodeType": "Return",
												"src": "1469:30:3"
											}
										]
									},
									"documentation": {
										"id": 431,
										"nodeType": "StructuredDocumentation",
										"src": "227:954:3",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1195:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1214:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "1206:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 432,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1206:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1205:17:3"
									},
									"returnParameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "1246:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 435,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1246:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1245:6:3"
									},
									"scope": 711,
									"src": "1186:320:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 478,
										"nodeType": "Block",
										"src": "2494:241:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 460,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 456,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2520:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$711",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$711",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2512:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 454,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2512:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 457,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2512:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 458,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2512:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 459,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 450,
																"src": "2537:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2512:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 461,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2545:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 453,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2504:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2504:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 463,
												"nodeType": "ExpressionStatement",
												"src": "2504:73:3"
											},
											{
												"assignments": [
													465,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 465,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2594:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 478,
														"src": "2589:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 464,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2589:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 472,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 470,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2637:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 466,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 448,
																"src": "2607:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 467,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2607:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 469,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 468,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 450,
																"src": "2629:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2607:29:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2607:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2588:52:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 474,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 465,
															"src": "2658:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 475,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2667:60:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 473,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2650:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2650:78:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 477,
												"nodeType": "ExpressionStatement",
												"src": "2650:78:3"
											}
										]
									},
									"documentation": {
										"id": 446,
										"nodeType": "StructuredDocumentation",
										"src": "1512:906:3",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 479,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2432:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2458:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "2442:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 447,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2442:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2477:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "2469:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2441:43:3"
									},
									"returnParameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2494:0:3"
									},
									"scope": 711,
									"src": "2423:312:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 496,
										"nodeType": "Block",
										"src": "3566:96:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 490,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 482,
															"src": "3605:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 491,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 484,
															"src": "3613:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 492,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3619:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 493,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3622:32:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 489,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															537,
															581
														],
														"referencedDeclaration": 581,
														"src": "3583:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3583:72:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 488,
												"id": 495,
												"nodeType": "Return",
												"src": "3576:79:3"
											}
										]
									},
									"documentation": {
										"id": 480,
										"nodeType": "StructuredDocumentation",
										"src": "2741:731:3",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 497,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3486:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3507:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "3499:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 481,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3499:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3528:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "3515:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 483,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3515:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3498:35:3"
									},
									"returnParameters": {
										"id": 488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "3552:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 486,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3552:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3551:14:3"
									},
									"scope": 711,
									"src": "3477:185:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 516,
										"nodeType": "Block",
										"src": "4031:76:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 510,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 500,
															"src": "4070:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 511,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 502,
															"src": "4078:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 512,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4084:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 513,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 504,
															"src": "4087:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 509,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															537,
															581
														],
														"referencedDeclaration": 581,
														"src": "4048:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 514,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4048:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 508,
												"id": 515,
												"nodeType": "Return",
												"src": "4041:59:3"
											}
										]
									},
									"documentation": {
										"id": 498,
										"nodeType": "StructuredDocumentation",
										"src": "3668:211:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 517,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3893:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 505,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3923:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 517,
												"src": "3915:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 499,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3915:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 502,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3952:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 517,
												"src": "3939:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 501,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3939:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 504,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3980:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 517,
												"src": "3966:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 503,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3966:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3905:93:3"
									},
									"returnParameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 517,
												"src": "4017:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 506,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4017:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4016:14:3"
									},
									"scope": 711,
									"src": "3884:223:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 536,
										"nodeType": "Block",
										"src": "4612:111:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 530,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 520,
															"src": "4651:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 531,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "4659:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 532,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 524,
															"src": "4665:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 533,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4672:43:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 529,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															537,
															581
														],
														"referencedDeclaration": 581,
														"src": "4629:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 534,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4629:87:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 528,
												"id": 535,
												"nodeType": "Return",
												"src": "4622:94:3"
											}
										]
									},
									"documentation": {
										"id": 518,
										"nodeType": "StructuredDocumentation",
										"src": "4113:351:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 537,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4478:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4517:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "4509:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4509:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4546:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "4533:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 521,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4533:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4568:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "4560:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 523,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4560:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4499:80:3"
									},
									"returnParameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "4598:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 526,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4598:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4597:14:3"
									},
									"scope": 711,
									"src": "4469:254:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 580,
										"nodeType": "Block",
										"src": "5150:267:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 558,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 554,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5176:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$711",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$711",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 553,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5168:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 552,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5168:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 555,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5168:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 556,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5168:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 557,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 544,
																"src": "5193:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5168:30:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 559,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5200:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 551,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5160:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:81:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 561,
												"nodeType": "ExpressionStatement",
												"src": "5160:81:3"
											},
											{
												"assignments": [
													563,
													565
												],
												"declarations": [
													{
														"constant": false,
														"id": 563,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5257:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 580,
														"src": "5252:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 562,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5252:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 565,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5279:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 580,
														"src": "5266:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 564,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5266:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 572,
												"initialValue": {
													"arguments": [
														{
															"id": 570,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 542,
															"src": "5319:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 566,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 540,
																"src": "5293:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 567,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5293:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 569,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 568,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 544,
																"src": "5312:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5293:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5293:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5251:73:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 574,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "5368:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 575,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 563,
															"src": "5376:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 576,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 565,
															"src": "5385:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 577,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 546,
															"src": "5397:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 573,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 666,
														"src": "5341:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 550,
												"id": 579,
												"nodeType": "Return",
												"src": "5334:76:3"
											}
										]
									},
									"documentation": {
										"id": 538,
										"nodeType": "StructuredDocumentation",
										"src": "4729:237:3",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 581,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4980:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5019:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "5011:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 539,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5011:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5048:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "5035:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 541,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5035:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5070:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "5062:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 543,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5062:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5099:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "5085:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 545,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5085:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5001:116:3"
									},
									"returnParameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "5136:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 548,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5136:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5135:14:3"
									},
									"scope": 711,
									"src": "4971:446:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 597,
										"nodeType": "Block",
										"src": "5694:97:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 592,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 584,
															"src": "5730:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 593,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 586,
															"src": "5738:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 594,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5744:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 591,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															598,
															627
														],
														"referencedDeclaration": 627,
														"src": "5711:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 595,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5711:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 590,
												"id": 596,
												"nodeType": "Return",
												"src": "5704:80:3"
											}
										]
									},
									"documentation": {
										"id": 582,
										"nodeType": "StructuredDocumentation",
										"src": "5423:166:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 598,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5603:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5630:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "5622:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 583,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5622:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5651:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "5638:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 585,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5638:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5621:35:3"
									},
									"returnParameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "5680:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 588,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5680:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5679:14:3"
									},
									"scope": 711,
									"src": "5594:197:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 626,
										"nodeType": "Block",
										"src": "6133:168:3",
										"statements": [
											{
												"assignments": [
													611,
													613
												],
												"declarations": [
													{
														"constant": false,
														"id": 611,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6149:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 626,
														"src": "6144:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 610,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6144:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 613,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6171:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 626,
														"src": "6158:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 612,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6158:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 618,
												"initialValue": {
													"arguments": [
														{
															"id": 616,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "6203:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 614,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "6185:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 615,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6185:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6185:23:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6143:65:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 620,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "6252:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 621,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 611,
															"src": "6260:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 622,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 613,
															"src": "6269:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 623,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 605,
															"src": "6281:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 619,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 666,
														"src": "6225:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 624,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6225:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 609,
												"id": 625,
												"nodeType": "Return",
												"src": "6218:76:3"
											}
										]
									},
									"documentation": {
										"id": 599,
										"nodeType": "StructuredDocumentation",
										"src": "5797:173:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 627,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5984:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6020:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 627,
												"src": "6012:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 600,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6012:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6049:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 627,
												"src": "6036:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 602,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6036:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6077:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 627,
												"src": "6063:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 604,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6063:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6002:93:3"
									},
									"returnParameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 627,
												"src": "6119:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 607,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6119:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6118:14:3"
									},
									"scope": 711,
									"src": "5975:326:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 665,
										"nodeType": "Block",
										"src": "6783:434:3",
										"statements": [
											{
												"condition": {
													"id": 641,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 632,
													"src": "6797:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 663,
													"nodeType": "Block",
													"src": "7153:58:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 659,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 634,
																		"src": "7175:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 660,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 636,
																		"src": "7187:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 658,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 710,
																	"src": "7167:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 661,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7167:33:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 662,
															"nodeType": "ExpressionStatement",
															"src": "7167:33:3"
														}
													]
												},
												"id": 664,
												"nodeType": "IfStatement",
												"src": "6793:418:3",
												"trueBody": {
													"id": 657,
													"nodeType": "Block",
													"src": "6806:341:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 645,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 642,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 634,
																		"src": "6824:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 643,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "6824:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 644,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6845:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6824:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 654,
															"nodeType": "IfStatement",
															"src": "6820:286:3",
															"trueBody": {
																"id": 653,
																"nodeType": "Block",
																"src": "6848:258:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 648,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 630,
																							"src": "7050:6:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 647,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 445,
																						"src": "7039:10:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 649,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7039:18:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 650,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7059:31:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 646,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7031:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 651,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7031:60:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 652,
																		"nodeType": "ExpressionStatement",
																		"src": "7031:60:3"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 655,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 634,
																"src": "7126:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 640,
															"id": 656,
															"nodeType": "Return",
															"src": "7119:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 628,
										"nodeType": "StructuredDocumentation",
										"src": "6307:277:3",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 666,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "6598:26:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 630,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6642:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "6634:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 629,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6634:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "6663:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "6658:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 631,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6658:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "6693:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "6680:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 633,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6680:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6727:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "6713:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 635,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6713:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6624:121:3"
									},
									"returnParameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "6769:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 638,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6769:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6768:14:3"
									},
									"scope": 711,
									"src": "6589:628:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 689,
										"nodeType": "Block",
										"src": "7598:135:3",
										"statements": [
											{
												"condition": {
													"id": 678,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 669,
													"src": "7612:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 687,
													"nodeType": "Block",
													"src": "7669:58:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 683,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 671,
																		"src": "7691:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 684,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 673,
																		"src": "7703:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 682,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 710,
																	"src": "7683:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 685,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7683:33:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 686,
															"nodeType": "ExpressionStatement",
															"src": "7683:33:3"
														}
													]
												},
												"id": 688,
												"nodeType": "IfStatement",
												"src": "7608:119:3",
												"trueBody": {
													"id": 681,
													"nodeType": "Block",
													"src": "7621:42:3",
													"statements": [
														{
															"expression": {
																"id": 679,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 671,
																"src": "7642:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 677,
															"id": 680,
															"nodeType": "Return",
															"src": "7635:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 667,
										"nodeType": "StructuredDocumentation",
										"src": "7223:210:3",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7447:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7478:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "7473:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 668,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7473:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 671,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7508:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "7495:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 670,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7495:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 673,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7542:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "7528:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 672,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7528:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7463:97:3"
									},
									"returnParameters": {
										"id": 677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 676,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "7584:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 675,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7584:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7583:14:3"
									},
									"scope": 711,
									"src": "7438:295:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 709,
										"nodeType": "Block",
										"src": "7822:457:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 697,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 692,
															"src": "7898:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7898:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 699,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7918:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7898:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 707,
													"nodeType": "Block",
													"src": "8228:45:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 704,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 694,
																		"src": "8249:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 703,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "8242:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 705,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8242:20:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 706,
															"nodeType": "ExpressionStatement",
															"src": "8242:20:3"
														}
													]
												},
												"id": 708,
												"nodeType": "IfStatement",
												"src": "7894:379:3",
												"trueBody": {
													"id": 702,
													"nodeType": "Block",
													"src": "7921:301:3",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8079:133:3",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8097:40:3",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "8126:10:3"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8120:5:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8120:17:3"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8101:15:3",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8165:2:3",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "8169:10:3"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8161:3:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8161:19:3"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "8182:15:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8154:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8154:44:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8154:44:3"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 692,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "8126:10:3",
																	"valueSize": 1
																},
																{
																	"declaration": 692,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "8169:10:3",
																	"valueSize": 1
																}
															],
															"id": 701,
															"nodeType": "InlineAssembly",
															"src": "8070:142:3"
														}
													]
												}
											}
										]
									},
									"id": 710,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "7748:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 692,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7769:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "7756:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 691,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7756:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7795:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "7781:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 693,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7781:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7755:53:3"
									},
									"returnParameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7822:0:3"
									},
									"scope": 711,
									"src": "7739:540:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 712,
							"src": "194:8087:3",
							"usedErrors": []
						}
					],
					"src": "101:8181:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							711
						],
						"ContextUpgradeable": [
							753
						],
						"Initializable": [
							300
						]
					},
					"id": 754,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 713,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 714,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 754,
							"sourceUnit": 301,
							"src": "110:42:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 716,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 300,
										"src": "691:13:4"
									},
									"id": 717,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:4"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 715,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 753,
							"linearizedBaseContracts": [
								753,
								300
							],
							"name": "ContextUpgradeable",
							"nameLocation": "669:18:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 722,
										"nodeType": "Block",
										"src": "763:7:4",
										"statements": []
									},
									"id": 723,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 720,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 719,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "746:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:16:4"
										}
									],
									"name": "__Context_init",
									"nameLocation": "720:14:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:4"
									},
									"returnParameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "763:0:4"
									},
									"scope": 753,
									"src": "711:59:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 728,
										"nodeType": "Block",
										"src": "838:7:4",
										"statements": []
									},
									"id": 729,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 726,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 725,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "821:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "821:16:4"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "785:24:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "809:2:4"
									},
									"returnParameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "838:0:4"
									},
									"scope": 753,
									"src": "776:69:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 737,
										"nodeType": "Block",
										"src": "912:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 734,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "929:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 735,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "929:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 733,
												"id": 736,
												"nodeType": "Return",
												"src": "922:17:4"
											}
										]
									},
									"id": 738,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "859:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "869:2:4"
									},
									"returnParameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 732,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 738,
												"src": "903:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 731,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "903:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:9:4"
									},
									"scope": 753,
									"src": "850:96:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 746,
										"nodeType": "Block",
										"src": "1019:32:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 743,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1036:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 744,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1036:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 742,
												"id": 745,
												"nodeType": "Return",
												"src": "1029:15:4"
											}
										]
									},
									"id": 747,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "961:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 739,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "969:2:4"
									},
									"returnParameters": {
										"id": 742,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 741,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 747,
												"src": "1003:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 740,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1003:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1002:16:4"
									},
									"scope": 753,
									"src": "952:99:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 748,
										"nodeType": "StructuredDocumentation",
										"src": "1057:254:4",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 752,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1336:5:4",
									"nodeType": "VariableDeclaration",
									"scope": 753,
									"src": "1316:25:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 749,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1316:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 751,
										"length": {
											"hexValue": "3530",
											"id": 750,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1324:2:4",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1316:11:4",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 754,
							"src": "651:693:4",
							"usedErrors": []
						}
					],
					"src": "86:1259:4"
				},
				"id": 4
			},
			"src/Contracts/Nether.sol": {
				"ast": {
					"absolutePath": "src/Contracts/Nether.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							711
						],
						"ContextUpgradeable": [
							753
						],
						"Initializable": [
							300
						],
						"Nether": [
							803
						],
						"OwnableUpgradeable": [
							131
						],
						"PausableUpgradeable": [
							427
						]
					},
					"id": 804,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 755,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol",
							"id": 756,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 804,
							"sourceUnit": 428,
							"src": "60:78:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 757,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 804,
							"sourceUnit": 132,
							"src": "140:75:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"id": 758,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 804,
							"sourceUnit": 301,
							"src": "217:75:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 759,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 300,
										"src": "315:13:5"
									},
									"id": 760,
									"nodeType": "InheritanceSpecifier",
									"src": "315:13:5"
								},
								{
									"baseName": {
										"id": 761,
										"name": "PausableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 427,
										"src": "330:19:5"
									},
									"id": 762,
									"nodeType": "InheritanceSpecifier",
									"src": "330:19:5"
								},
								{
									"baseName": {
										"id": 763,
										"name": "OwnableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 131,
										"src": "351:18:5"
									},
									"id": 764,
									"nodeType": "InheritanceSpecifier",
									"src": "351:18:5"
								}
							],
							"canonicalName": "Nether",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 803,
							"linearizedBaseContracts": [
								803,
								131,
								427,
								753,
								300
							],
							"name": "Nether",
							"nameLocation": "305:6:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 771,
										"nodeType": "Block",
										"src": "445:41:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 768,
														"name": "_disableInitializers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 281,
														"src": "456:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "456:22:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 770,
												"nodeType": "ExpressionStatement",
												"src": "456:22:5"
											}
										]
									},
									"documentation": {
										"id": 765,
										"nodeType": "StructuredDocumentation",
										"src": "377:48:5",
										"text": "@custom:oz-upgrades-unsafe-allow constructor"
									},
									"id": 772,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 766,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "442:2:5"
									},
									"returnParameters": {
										"id": 767,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "445:0:5"
									},
									"scope": 803,
									"src": "431:55:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 783,
										"nodeType": "Block",
										"src": "535:63:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 777,
														"name": "__Pausable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 331,
														"src": "546:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 778,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "546:17:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 779,
												"nodeType": "ExpressionStatement",
												"src": "546:17:5"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 780,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 26,
														"src": "574:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 781,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "574:16:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 782,
												"nodeType": "ExpressionStatement",
												"src": "574:16:5"
											}
										]
									},
									"functionSelector": "8129fc1c",
									"id": 784,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 775,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 774,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 202,
												"src": "516:11:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "516:11:5"
										}
									],
									"name": "initialize",
									"nameLocation": "503:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 773,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:5"
									},
									"returnParameters": {
										"id": 776,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "535:0:5"
									},
									"scope": 803,
									"src": "494:104:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 792,
										"nodeType": "Block",
										"src": "640:27:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 789,
														"name": "_pause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 405,
														"src": "651:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 790,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "651:8:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 791,
												"nodeType": "ExpressionStatement",
												"src": "651:8:5"
											}
										]
									},
									"functionSelector": "8456cb59",
									"id": 793,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 787,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 786,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "630:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "630:9:5"
										}
									],
									"name": "pause",
									"nameLocation": "615:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "620:2:5"
									},
									"returnParameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "640:0:5"
									},
									"scope": 803,
									"src": "606:61:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 801,
										"nodeType": "Block",
										"src": "711:29:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 798,
														"name": "_unpause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 421,
														"src": "722:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "722:10:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 800,
												"nodeType": "ExpressionStatement",
												"src": "722:10:5"
											}
										]
									},
									"functionSelector": "3f4ba83a",
									"id": 802,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 796,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 795,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "701:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "701:9:5"
										}
									],
									"name": "unpause",
									"nameLocation": "684:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 794,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "691:2:5"
									},
									"returnParameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "711:0:5"
									},
									"scope": 803,
									"src": "675:65:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 804,
							"src": "296:447:5",
							"usedErrors": []
						}
					],
					"src": "33:710:5"
				},
				"id": 5
			}
		}
	}
}